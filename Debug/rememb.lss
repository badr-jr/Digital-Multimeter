
rememb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000155c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  0000155c  000015f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800110  00800110  000016a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000201c  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5e  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e48  00000000  00000000  00004406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00005250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  000055a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be6  00000000  00000000  00005c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000067fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 03 	call	0x694	; 0x694 <main>
      8a:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vidInit>:
#include <ADC.h>
#include <Types.h>
#include <Registers.h>
#include <Macros.h>
	void ADC_vidInit(void){
		ClrBit(ADMUX,0);
      92:	38 98       	cbi	0x07, 0	; 7
		ClrBit(ADMUX,1);
      94:	39 98       	cbi	0x07, 1	; 7
		ClrBit(ADMUX,2);		// single conversion channel 0
      96:	3a 98       	cbi	0x07, 2	; 7
		ClrBit(ADMUX,3);
      98:	3b 98       	cbi	0x07, 3	; 7
		ClrBit(ADMUX,4);
      9a:	3c 98       	cbi	0x07, 4	; 7

		ClrBit(ADMUX,6);		// AREF internal
      9c:	3e 98       	cbi	0x07, 6	; 7
		ClrBit(ADMUX,7);
      9e:	3f 98       	cbi	0x07, 7	; 7

		ClrBit(ADMUX,5);		// Right Adjustment
      a0:	3d 98       	cbi	0x07, 5	; 7

		ClrBit(ADCSRA,0);
      a2:	30 98       	cbi	0x06, 0	; 6
		ClrBit(ADCSRA,1);		// prescaler 128
      a4:	31 98       	cbi	0x06, 1	; 6
		ClrBit(ADCSRA,2);
      a6:	32 98       	cbi	0x06, 2	; 6

		SetBit(ADCSRA,3);      // enable ADC interrupt
      a8:	33 9a       	sbi	0x06, 3	; 6

		SetBit(ADCSRA,7);		// enable ADC
      aa:	37 9a       	sbi	0x06, 7	; 6

		SetBit(SREG,7);			// enable global interrupt
      ac:	8f b7       	in	r24, 0x3f	; 63
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	8f bf       	out	0x3f, r24	; 63

		SetBit(ADCSRA,6);		// start conversion
      b2:	36 9a       	sbi	0x06, 6	; 6
      b4:	08 95       	ret

000000b6 <DIO_vidSetPortDirection>:
		case 3:
		return PIND;
		break;
	}
	return 0;
}
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	41 f0       	breq	.+16     	; 0xca <DIO_vidSetPortDirection+0x14>
      ba:	28 f0       	brcs	.+10     	; 0xc6 <DIO_vidSetPortDirection+0x10>
      bc:	82 30       	cpi	r24, 0x02	; 2
      be:	39 f0       	breq	.+14     	; 0xce <DIO_vidSetPortDirection+0x18>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	39 f0       	breq	.+14     	; 0xd2 <DIO_vidSetPortDirection+0x1c>
      c4:	08 95       	ret
      c6:	6a bb       	out	0x1a, r22	; 26
      c8:	08 95       	ret
      ca:	67 bb       	out	0x17, r22	; 23
      cc:	08 95       	ret
      ce:	64 bb       	out	0x14, r22	; 20
      d0:	08 95       	ret
      d2:	61 bb       	out	0x11, r22	; 17
      d4:	08 95       	ret

000000d6 <DIO_vidSetPortValue>:
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	41 f0       	breq	.+16     	; 0xea <DIO_vidSetPortValue+0x14>
      da:	28 f0       	brcs	.+10     	; 0xe6 <DIO_vidSetPortValue+0x10>
      dc:	82 30       	cpi	r24, 0x02	; 2
      de:	39 f0       	breq	.+14     	; 0xee <DIO_vidSetPortValue+0x18>
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	39 f0       	breq	.+14     	; 0xf2 <DIO_vidSetPortValue+0x1c>
      e4:	08 95       	ret
      e6:	6b bb       	out	0x1b, r22	; 27
      e8:	08 95       	ret
      ea:	68 bb       	out	0x18, r22	; 24
      ec:	08 95       	ret
      ee:	65 bb       	out	0x15, r22	; 21
      f0:	08 95       	ret
      f2:	62 bb       	out	0x12, r22	; 18
      f4:	08 95       	ret

000000f6 <DIO_vidSetPinDirection>:
void DIO_vidSetPinDirection(u8 portNumber,u8 pin,u8 value){
	switch(portNumber){
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	11 f1       	breq	.+68     	; 0x13e <DIO_vidSetPinDirection+0x48>
      fa:	30 f0       	brcs	.+12     	; 0x108 <DIO_vidSetPinDirection+0x12>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	d1 f1       	breq	.+116    	; 0x174 <DIO_vidSetPinDirection+0x7e>
     100:	83 30       	cpi	r24, 0x03	; 3
     102:	09 f4       	brne	.+2      	; 0x106 <DIO_vidSetPinDirection+0x10>
     104:	52 c0       	rjmp	.+164    	; 0x1aa <DIO_vidSetPinDirection+0xb4>
     106:	08 95       	ret
		case 0:
		if(value==1)
     108:	41 30       	cpi	r20, 0x01	; 1
     10a:	59 f4       	brne	.+22     	; 0x122 <DIO_vidSetPinDirection+0x2c>
		SetBit(DDRA,pin);
     10c:	2a b3       	in	r18, 0x1a	; 26
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vidSetPinDirection+0x22>
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vidSetPinDirection+0x1e>
     11c:	82 2b       	or	r24, r18
     11e:	8a bb       	out	0x1a, r24	; 26
     120:	08 95       	ret
		else if(value==0)
     122:	41 11       	cpse	r20, r1
     124:	5c c0       	rjmp	.+184    	; 0x1de <DIO_vidSetPinDirection+0xe8>
		ClrBit(DDRA,pin);
     126:	2a b3       	in	r18, 0x1a	; 26
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vidSetPinDirection+0x3c>
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vidSetPinDirection+0x38>
     136:	80 95       	com	r24
     138:	82 23       	and	r24, r18
     13a:	8a bb       	out	0x1a, r24	; 26
     13c:	08 95       	ret
		break;
		case 1:
		if(value==1)
     13e:	41 30       	cpi	r20, 0x01	; 1
     140:	59 f4       	brne	.+22     	; 0x158 <DIO_vidSetPinDirection+0x62>
		SetBit(DDRB,pin);
     142:	27 b3       	in	r18, 0x17	; 23
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_vidSetPinDirection+0x58>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_vidSetPinDirection+0x54>
     152:	82 2b       	or	r24, r18
     154:	87 bb       	out	0x17, r24	; 23
     156:	08 95       	ret
		else if(value==0)
     158:	41 11       	cpse	r20, r1
     15a:	41 c0       	rjmp	.+130    	; 0x1de <DIO_vidSetPinDirection+0xe8>
		ClrBit(DDRB,pin);
     15c:	27 b3       	in	r18, 0x17	; 23
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_vidSetPinDirection+0x72>
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	6a 95       	dec	r22
     16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_vidSetPinDirection+0x6e>
     16c:	80 95       	com	r24
     16e:	82 23       	and	r24, r18
     170:	87 bb       	out	0x17, r24	; 23
     172:	08 95       	ret
		break;
		case 2:
		if(value==1)
     174:	41 30       	cpi	r20, 0x01	; 1
     176:	59 f4       	brne	.+22     	; 0x18e <DIO_vidSetPinDirection+0x98>
		SetBit(DDRC,pin);
     178:	24 b3       	in	r18, 0x14	; 20
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_vidSetPinDirection+0x8e>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	6a 95       	dec	r22
     186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_vidSetPinDirection+0x8a>
     188:	82 2b       	or	r24, r18
     18a:	84 bb       	out	0x14, r24	; 20
     18c:	08 95       	ret
		else if(value==0)
     18e:	41 11       	cpse	r20, r1
     190:	26 c0       	rjmp	.+76     	; 0x1de <DIO_vidSetPinDirection+0xe8>
		ClrBit(DDRC,pin);
     192:	24 b3       	in	r18, 0x14	; 20
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vidSetPinDirection+0xa8>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vidSetPinDirection+0xa4>
     1a2:	80 95       	com	r24
     1a4:	82 23       	and	r24, r18
     1a6:	84 bb       	out	0x14, r24	; 20
     1a8:	08 95       	ret
		break;
		case 3:
		if(value==1)
     1aa:	41 30       	cpi	r20, 0x01	; 1
     1ac:	59 f4       	brne	.+22     	; 0x1c4 <DIO_vidSetPinDirection+0xce>
		SetBit(DDRD,pin);
     1ae:	21 b3       	in	r18, 0x11	; 17
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_vidSetPinDirection+0xc4>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	6a 95       	dec	r22
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_vidSetPinDirection+0xc0>
     1be:	82 2b       	or	r24, r18
     1c0:	81 bb       	out	0x11, r24	; 17
     1c2:	08 95       	ret
		else if(value==0)
     1c4:	41 11       	cpse	r20, r1
     1c6:	0b c0       	rjmp	.+22     	; 0x1de <DIO_vidSetPinDirection+0xe8>
		ClrBit(DDRD,pin);
     1c8:	21 b3       	in	r18, 0x11	; 17
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_vidSetPinDirection+0xde>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_vidSetPinDirection+0xda>
     1d8:	80 95       	com	r24
     1da:	82 23       	and	r24, r18
     1dc:	81 bb       	out	0x11, r24	; 17
     1de:	08 95       	ret

000001e0 <DIO_vidSetPinValue>:
		break;
	}
}
void DIO_vidSetPinValue(u8 portNumber,u8 pin,u8 value){
	switch(portNumber){
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	11 f1       	breq	.+68     	; 0x228 <DIO_vidSetPinValue+0x48>
     1e4:	30 f0       	brcs	.+12     	; 0x1f2 <DIO_vidSetPinValue+0x12>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	d1 f1       	breq	.+116    	; 0x25e <DIO_vidSetPinValue+0x7e>
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <DIO_vidSetPinValue+0x10>
     1ee:	52 c0       	rjmp	.+164    	; 0x294 <DIO_vidSetPinValue+0xb4>
     1f0:	08 95       	ret
		case 0:
		if(value==1)
     1f2:	41 30       	cpi	r20, 0x01	; 1
     1f4:	59 f4       	brne	.+22     	; 0x20c <DIO_vidSetPinValue+0x2c>
		SetBit(PORTA,pin);
     1f6:	2b b3       	in	r18, 0x1b	; 27
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vidSetPinValue+0x22>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vidSetPinValue+0x1e>
     206:	82 2b       	or	r24, r18
     208:	8b bb       	out	0x1b, r24	; 27
     20a:	08 95       	ret
		else if(value==0)
     20c:	41 11       	cpse	r20, r1
     20e:	5c c0       	rjmp	.+184    	; 0x2c8 <DIO_vidSetPinValue+0xe8>
		ClrBit(PORTA,pin);
     210:	2b b3       	in	r18, 0x1b	; 27
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_vidSetPinValue+0x3c>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_vidSetPinValue+0x38>
     220:	80 95       	com	r24
     222:	82 23       	and	r24, r18
     224:	8b bb       	out	0x1b, r24	; 27
     226:	08 95       	ret
		break;
		case 1:
		if(value==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	59 f4       	brne	.+22     	; 0x242 <DIO_vidSetPinValue+0x62>
		SetBit(PORTB,pin);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_vidSetPinValue+0x58>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	6a 95       	dec	r22
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_vidSetPinValue+0x54>
     23c:	82 2b       	or	r24, r18
     23e:	88 bb       	out	0x18, r24	; 24
     240:	08 95       	ret
		else if(value==0)
     242:	41 11       	cpse	r20, r1
     244:	41 c0       	rjmp	.+130    	; 0x2c8 <DIO_vidSetPinValue+0xe8>
		ClrBit(PORTB,pin);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_vidSetPinValue+0x72>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	6a 95       	dec	r22
     254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_vidSetPinValue+0x6e>
     256:	80 95       	com	r24
     258:	82 23       	and	r24, r18
     25a:	88 bb       	out	0x18, r24	; 24
     25c:	08 95       	ret
		break;
		case 2:
		if(value==1)
     25e:	41 30       	cpi	r20, 0x01	; 1
     260:	59 f4       	brne	.+22     	; 0x278 <DIO_vidSetPinValue+0x98>
		SetBit(PORTC,pin);
     262:	25 b3       	in	r18, 0x15	; 21
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_vidSetPinValue+0x8e>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_vidSetPinValue+0x8a>
     272:	82 2b       	or	r24, r18
     274:	85 bb       	out	0x15, r24	; 21
     276:	08 95       	ret
		else if(value==0)
     278:	41 11       	cpse	r20, r1
     27a:	26 c0       	rjmp	.+76     	; 0x2c8 <DIO_vidSetPinValue+0xe8>
		ClrBit(PORTC,pin);
     27c:	25 b3       	in	r18, 0x15	; 21
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_vidSetPinValue+0xa8>
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	6a 95       	dec	r22
     28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_vidSetPinValue+0xa4>
     28c:	80 95       	com	r24
     28e:	82 23       	and	r24, r18
     290:	85 bb       	out	0x15, r24	; 21
     292:	08 95       	ret
		break;
		case 3:
		if(value==1)
     294:	41 30       	cpi	r20, 0x01	; 1
     296:	59 f4       	brne	.+22     	; 0x2ae <DIO_vidSetPinValue+0xce>
		SetBit(PORTD,pin);
     298:	22 b3       	in	r18, 0x12	; 18
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vidSetPinValue+0xc4>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vidSetPinValue+0xc0>
     2a8:	82 2b       	or	r24, r18
     2aa:	82 bb       	out	0x12, r24	; 18
     2ac:	08 95       	ret
		else if(value==0)
     2ae:	41 11       	cpse	r20, r1
     2b0:	0b c0       	rjmp	.+22     	; 0x2c8 <DIO_vidSetPinValue+0xe8>
		ClrBit(PORTD,pin);
     2b2:	22 b3       	in	r18, 0x12	; 18
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_vidSetPinValue+0xde>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	6a 95       	dec	r22
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_vidSetPinValue+0xda>
     2c2:	80 95       	com	r24
     2c4:	82 23       	and	r24, r18
     2c6:	82 bb       	out	0x12, r24	; 18
     2c8:	08 95       	ret

000002ca <DIO_u8ReadPinValue>:
		break;
	}
}
u8 DIO_u8ReadPinValue(u8 portNumber,u8 pin){
	switch(portNumber){
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	79 f0       	breq	.+30     	; 0x2ec <DIO_u8ReadPinValue+0x22>
     2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_u8ReadPinValue+0x10>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	a9 f0       	breq	.+42     	; 0x2fe <DIO_u8ReadPinValue+0x34>
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	e1 f0       	breq	.+56     	; 0x310 <DIO_u8ReadPinValue+0x46>
     2d8:	24 c0       	rjmp	.+72     	; 0x322 <DIO_u8ReadPinValue+0x58>
		case 0:
		return GetBit(PINA,pin);
     2da:	89 b3       	in	r24, 0x19	; 25
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8ReadPinValue+0x1a>
     2e0:	95 95       	asr	r25
     2e2:	87 95       	ror	r24
     2e4:	6a 95       	dec	r22
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_u8ReadPinValue+0x16>
     2e8:	81 70       	andi	r24, 0x01	; 1
     2ea:	08 95       	ret
		break;
		case 1:
		return GetBit(PINB,pin);
     2ec:	86 b3       	in	r24, 0x16	; 22
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_u8ReadPinValue+0x2c>
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	6a 95       	dec	r22
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_u8ReadPinValue+0x28>
     2fa:	81 70       	andi	r24, 0x01	; 1
     2fc:	08 95       	ret
		break;
		case 2:
		return GetBit(PINC,pin);
     2fe:	83 b3       	in	r24, 0x13	; 19
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_u8ReadPinValue+0x3e>
     304:	95 95       	asr	r25
     306:	87 95       	ror	r24
     308:	6a 95       	dec	r22
     30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_u8ReadPinValue+0x3a>
     30c:	81 70       	andi	r24, 0x01	; 1
     30e:	08 95       	ret
		break;
		case 3:
		return GetBit(PIND,pin);
     310:	80 b3       	in	r24, 0x10	; 16
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8ReadPinValue+0x50>
     316:	95 95       	asr	r25
     318:	87 95       	ror	r24
     31a:	6a 95       	dec	r22
     31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8ReadPinValue+0x4c>
     31e:	81 70       	andi	r24, 0x01	; 1
     320:	08 95       	ret
		break;
	}
	return 0;
     322:	80 e0       	ldi	r24, 0x00	; 0
}
     324:	08 95       	ret

00000326 <Keypad_vidInit>:
#include "DIO.h"
#include <util/delay.h>
#define F_CPU 8000000
u8 flag[16]={0},i;
void Keypad_vidInit(){
	DIO_vidSetPinDirection(KeybadPort,R1,0);
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	63 e0       	ldi	r22, 0x03	; 3
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(KeybadPort,R2,0);
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	62 e0       	ldi	r22, 0x02	; 2
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(KeybadPort,R3,0);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(KeybadPort,R4,0);
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(KeybadPort,C1,1);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	64 e0       	ldi	r22, 0x04	; 4
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(KeybadPort,C2,1);
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	65 e0       	ldi	r22, 0x05	; 5
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(KeybadPort,C3,1);
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	66 e0       	ldi	r22, 0x06	; 6
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(KeybadPort,C4,1);
     36c:	41 e0       	ldi	r20, 0x01	; 1
     36e:	67 e0       	ldi	r22, 0x07	; 7
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinValue(KeybadPort,R1,1);
     376:	41 e0       	ldi	r20, 0x01	; 1
     378:	63 e0       	ldi	r22, 0x03	; 3
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(KeybadPort,R2,1);
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	62 e0       	ldi	r22, 0x02	; 2
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(KeybadPort,R3,1);
     38a:	41 e0       	ldi	r20, 0x01	; 1
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(KeybadPort,R4,1);
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
     39e:	08 95       	ret

000003a0 <Keypad_u8SetButtonStatus>:
}

u8 Keypad_u8SetButtonStatus(u8 ButtonNo){
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	28 97       	sbiw	r28, 0x08	; 8
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	18 2f       	mov	r17, r24
	u8 status=0;
	u8 realCol[]={C1,C2,C3,C4};
     3ba:	84 e0       	ldi	r24, 0x04	; 4
     3bc:	89 83       	std	Y+1, r24	; 0x01
     3be:	85 e0       	ldi	r24, 0x05	; 5
     3c0:	8a 83       	std	Y+2, r24	; 0x02
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	8b 83       	std	Y+3, r24	; 0x03
     3c6:	87 e0       	ldi	r24, 0x07	; 7
     3c8:	8c 83       	std	Y+4, r24	; 0x04
	u8 realRow[]={R1,R2,R3,R4};
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	8d 83       	std	Y+5, r24	; 0x05
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	8e 83       	std	Y+6, r24	; 0x06
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	8f 83       	std	Y+7, r24	; 0x07
     3d6:	18 86       	std	Y+8, r1	; 0x08
	u8 row=ButtonNo/4;
	u8 col=ButtonNo%4;

	DIO_vidSetPinValue(KeybadPort,C1,1);
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	64 e0       	ldi	r22, 0x04	; 4
     3dc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(KeybadPort,C2,1);
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	65 e0       	ldi	r22, 0x05	; 5
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(KeybadPort,C3,1);
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	66 e0       	ldi	r22, 0x06	; 6
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(KeybadPort,C4,1);
     3f4:	41 e0       	ldi	r20, 0x01	; 1
     3f6:	67 e0       	ldi	r22, 0x07	; 7
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(KeybadPort,realCol[col],0);
     3fe:	81 2f       	mov	r24, r17
     400:	83 70       	andi	r24, 0x03	; 3
     402:	fe 01       	movw	r30, r28
     404:	e8 0f       	add	r30, r24
     406:	f1 1d       	adc	r31, r1
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	61 81       	ldd	r22, Z+1	; 0x01
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	u8 value=DIO_u8ReadPinValue(KeybadPort,realRow[row]);
     412:	81 2f       	mov	r24, r17
     414:	86 95       	lsr	r24
     416:	86 95       	lsr	r24
     418:	fe 01       	movw	r30, r28
     41a:	e8 0f       	add	r30, r24
     41c:	f1 1d       	adc	r31, r1
     41e:	05 81       	ldd	r16, Z+5	; 0x05
     420:	60 2f       	mov	r22, r16
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_u8ReadPinValue>
	if(value==0){
     428:	81 11       	cpse	r24, r1
     42a:	18 c0       	rjmp	.+48     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42c:	81 ee       	ldi	r24, 0xE1	; 225
     42e:	94 e0       	ldi	r25, 0x04	; 4
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     436:	00 00       	nop
		_delay_ms(5);
		value=DIO_u8ReadPinValue(KeybadPort,realRow[row]);
     438:	60 2f       	mov	r22, r16
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_u8ReadPinValue>
		if(value==0 && flag[ButtonNo]==0){
     440:	81 11       	cpse	r24, r1
     442:	15 c0       	rjmp	.+42     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     444:	e1 2f       	mov	r30, r17
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	df 01       	movw	r26, r30
     44a:	a0 5f       	subi	r26, 0xF0	; 240
     44c:	be 4f       	sbci	r27, 0xFE	; 254
     44e:	8c 91       	ld	r24, X
     450:	81 11       	cpse	r24, r1
     452:	0f c0       	rjmp	.+30     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			status=Pressed;
			flag[ButtonNo]=1;
     454:	fd 01       	movw	r30, r26
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 83       	st	Z, r24
     45a:	0e c0       	rjmp	.+28     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		}
	}
	else if(value==1){
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	59 f4       	brne	.+22     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		flag[ButtonNo]=0;
     460:	e1 2f       	mov	r30, r17
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	e0 5f       	subi	r30, 0xF0	; 240
     466:	fe 4f       	sbci	r31, 0xFE	; 254
     468:	10 82       	st	Z, r1
	DIO_vidSetPinValue(KeybadPort,R3,1);
	DIO_vidSetPinValue(KeybadPort,R4,1);
}

u8 Keypad_u8SetButtonStatus(u8 ButtonNo){
	u8 status=0;
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	05 c0       	rjmp	.+10     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	03 c0       	rjmp	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	01 c0       	rjmp	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(value==1){
		flag[ButtonNo]=0;
	}
	return status;
}
     478:	28 96       	adiw	r28, 0x08	; 8
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <Keypad_u8GetKeyNumber>:

u8 Keypad_u8GetKeyNumber(){
	for(i=0;i<5;i++){
     48e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <i>
     492:	80 e0       	ldi	r24, 0x00	; 0
		if(Keypad_u8SetButtonStatus(i)==1){
     494:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Keypad_u8SetButtonStatus>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	19 f4       	brne	.+6      	; 0x4a2 <Keypad_u8GetKeyNumber+0x14>
			return i;
     49c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <i>
     4a0:	08 95       	ret
	}
	return status;
}

u8 Keypad_u8GetKeyNumber(){
	for(i=0;i<5;i++){
     4a2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <i>
     4a6:	8f 5f       	subi	r24, 0xFF	; 255
     4a8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <i>
     4ac:	85 30       	cpi	r24, 0x05	; 5
     4ae:	90 f3       	brcs	.-28     	; 0x494 <Keypad_u8GetKeyNumber+0x6>
		if(Keypad_u8SetButtonStatus(i)==1){
			return i;
			break;
		}
	}
	return 4;
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	08 95       	ret

000004b4 <LCD_vidWriteData>:
	_delay_ms(1);
	LCD_vidWriteCommand(0b00001100);
	_delay_ms(2);
	LCD_vidWriteCommand(0b00000001);
}
void LCD_vidWriteData(u8 data){
     4b4:	cf 93       	push	r28
     4b6:	c8 2f       	mov	r28, r24
	DIO_vidSetPinValue(LCD_ControlPort,RS,1);
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	65 e0       	ldi	r22, 0x05	; 5
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(LCD_ControlPort,RW,0);
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	66 e0       	ldi	r22, 0x06	; 6
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPortValue(LCD_DataPort,data);
     4cc:	6c 2f       	mov	r22, r28
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_vidSetPortValue>
	DIO_vidSetPinValue(LCD_ControlPort,E,1);
     4d4:	41 e0       	ldi	r20, 0x01	; 1
     4d6:	67 e0       	ldi	r22, 0x07	; 7
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
     4de:	8d ee       	ldi	r24, 0xED	; 237
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LCD_vidWriteData+0x2e>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <LCD_vidWriteData+0x34>
     4e8:	00 00       	nop
	_delay_ms(3);
	DIO_vidSetPinValue(LCD_ControlPort,E,0);
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	67 e0       	ldi	r22, 0x07	; 7
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
     4f4:	89 ef       	ldi	r24, 0xF9	; 249
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_vidWriteData+0x44>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_vidWriteData+0x4a>
     4fe:	00 00       	nop
	_delay_ms(1);
}
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <LCD_vidWriteCommand>:
void LCD_vidWriteCommand(u8 command){
     504:	cf 93       	push	r28
     506:	c8 2f       	mov	r28, r24
	DIO_vidSetPinValue(LCD_ControlPort,RS,0);
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	65 e0       	ldi	r22, 0x05	; 5
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(LCD_ControlPort,RW,0);
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	66 e0       	ldi	r22, 0x06	; 6
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	DIO_vidSetPortValue(LCD_DataPort,command);
     51c:	6c 2f       	mov	r22, r28
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_vidSetPortValue>
	DIO_vidSetPinValue(LCD_ControlPort,E,1);
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	67 e0       	ldi	r22, 0x07	; 7
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
     52e:	89 ef       	ldi	r24, 0xF9	; 249
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <LCD_vidWriteCommand+0x2e>
     536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_vidWriteCommand+0x34>
     538:	00 00       	nop
	_delay_ms(1);
	DIO_vidSetPinValue(LCD_ControlPort,E,0);
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	67 e0       	ldi	r22, 0x07	; 7
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
     544:	83 ec       	ldi	r24, 0xC3	; 195
     546:	99 e0       	ldi	r25, 0x09	; 9
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_vidWriteCommand+0x44>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_vidWriteCommand+0x4a>
     54e:	00 00       	nop
	_delay_ms(10);
}
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <LCD_vidInit>:
#include <util/delay.h>
#define F_CPU 8000000


void LCD_vidInit(void){
	DIO_vidSetPortDirection(LCD_DataPort,255);
     554:	6f ef       	ldi	r22, 0xFF	; 255
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vidSetPortDirection>
	DIO_vidSetPinDirection(LCD_ControlPort,RS,1);
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	65 e0       	ldi	r22, 0x05	; 5
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(LCD_ControlPort,RW,1);
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	66 e0       	ldi	r22, 0x06	; 6
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(LCD_ControlPort,E,1);
     570:	41 e0       	ldi	r20, 0x01	; 1
     572:	67 e0       	ldi	r22, 0x07	; 7
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
     57a:	83 ed       	ldi	r24, 0xD3	; 211
     57c:	90 e3       	ldi	r25, 0x30	; 48
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <LCD_vidInit+0x2a>
     582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_vidInit+0x30>
     584:	00 00       	nop
	_delay_ms(50);
	LCD_vidWriteCommand(0b00111000);
     586:	88 e3       	ldi	r24, 0x38	; 56
     588:	0e 94 82 02 	call	0x504	; 0x504 <LCD_vidWriteCommand>
     58c:	89 ef       	ldi	r24, 0xF9	; 249
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <LCD_vidInit+0x3c>
     594:	00 c0       	rjmp	.+0      	; 0x596 <LCD_vidInit+0x42>
     596:	00 00       	nop
	_delay_ms(1);
	LCD_vidWriteCommand(0b00001100);
     598:	8c e0       	ldi	r24, 0x0C	; 12
     59a:	0e 94 82 02 	call	0x504	; 0x504 <LCD_vidWriteCommand>
     59e:	83 ef       	ldi	r24, 0xF3	; 243
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_vidInit+0x4e>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_vidInit+0x54>
     5a8:	00 00       	nop
	_delay_ms(2);
	LCD_vidWriteCommand(0b00000001);
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 82 02 	call	0x504	; 0x504 <LCD_vidWriteCommand>
     5b0:	08 95       	ret

000005b2 <LCD_vidWriteString>:
	_delay_ms(1);
	DIO_vidSetPinValue(LCD_ControlPort,E,0);
	_delay_ms(10);
}

void LCD_vidWriteString(u8 str[]){
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	fc 01       	movw	r30, r24
	u8 i=0;
	while(str[i]!=0){
     5ba:	80 81       	ld	r24, Z
     5bc:	88 23       	and	r24, r24
     5be:	59 f0       	breq	.+22     	; 0x5d6 <LCD_vidWriteString+0x24>
     5c0:	8f 01       	movw	r16, r30
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_vidWriteData(str[i]);
     5c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_vidWriteData>
		i++;
     5c8:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(10);
}

void LCD_vidWriteString(u8 str[]){
	u8 i=0;
	while(str[i]!=0){
     5ca:	f8 01       	movw	r30, r16
     5cc:	ec 0f       	add	r30, r28
     5ce:	f1 1d       	adc	r31, r1
     5d0:	80 81       	ld	r24, Z
     5d2:	81 11       	cpse	r24, r1
     5d4:	f7 cf       	rjmp	.-18     	; 0x5c4 <LCD_vidWriteString+0x12>
		LCD_vidWriteData(str[i]);
		i++;
	}

}
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <LCD_vidWriteNumber>:
void LCD_vidWriteNumber(s32 num){
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	2a 97       	sbiw	r28, 0x0a	; 10
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
	u8 result[10]; s8 i=-1;
     600:	1f ef       	ldi	r17, 0xFF	; 255
	do{
		i++;
		result[i]=((num%10)+48);
     602:	0f 2e       	mov	r0, r31
     604:	fa e0       	ldi	r31, 0x0A	; 10
     606:	8f 2e       	mov	r8, r31
     608:	91 2c       	mov	r9, r1
     60a:	a1 2c       	mov	r10, r1
     60c:	b1 2c       	mov	r11, r1
     60e:	f0 2d       	mov	r31, r0
     610:	1f 5f       	subi	r17, 0xFF	; 255
     612:	ee 24       	eor	r14, r14
     614:	e3 94       	inc	r14
     616:	f1 2c       	mov	r15, r1
     618:	ec 0e       	add	r14, r28
     61a:	fd 1e       	adc	r15, r29
     61c:	e1 0e       	add	r14, r17
     61e:	f1 1c       	adc	r15, r1
     620:	17 fd       	sbrc	r17, 7
     622:	fa 94       	dec	r15
     624:	a5 01       	movw	r20, r10
     626:	94 01       	movw	r18, r8
     628:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__divmodsi4>
     62c:	60 5d       	subi	r22, 0xD0	; 208
     62e:	f7 01       	movw	r30, r14
     630:	60 83       	st	Z, r22
		num/=10;
     632:	62 2f       	mov	r22, r18
     634:	73 2f       	mov	r23, r19
     636:	84 2f       	mov	r24, r20
     638:	95 2f       	mov	r25, r21
	}
	while(num!=0);
     63a:	61 15       	cp	r22, r1
     63c:	71 05       	cpc	r23, r1
     63e:	81 05       	cpc	r24, r1
     640:	91 05       	cpc	r25, r1
     642:	31 f7       	brne	.-52     	; 0x610 <LCD_vidWriteNumber+0x32>
	while(i>=0){
     644:	11 23       	and	r17, r17
     646:	6c f0       	brlt	.+26     	; 0x662 <LCD_vidWriteNumber+0x84>
		LCD_vidWriteData(result[i]);
     648:	e1 e0       	ldi	r30, 0x01	; 1
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	ec 0f       	add	r30, r28
     64e:	fd 1f       	adc	r31, r29
     650:	e1 0f       	add	r30, r17
     652:	f1 1d       	adc	r31, r1
     654:	17 fd       	sbrc	r17, 7
     656:	fa 95       	dec	r31
     658:	80 81       	ld	r24, Z
     65a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_vidWriteData>
     65e:	11 50       	subi	r17, 0x01	; 1
		i++;
		result[i]=((num%10)+48);
		num/=10;
	}
	while(num!=0);
	while(i>=0){
     660:	9a f7       	brpl	.-26     	; 0x648 <LCD_vidWriteNumber+0x6a>
		LCD_vidWriteData(result[i]);
		i--;
	}

}
     662:	2a 96       	adiw	r28, 0x0a	; 10
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	bf 90       	pop	r11
     67a:	af 90       	pop	r10
     67c:	9f 90       	pop	r9
     67e:	8f 90       	pop	r8
     680:	08 95       	ret

00000682 <LCD_vidSetPosition>:

void LCD_vidSetPosition(u8 row,u8 col){
	LCD_vidWriteCommand(0b10000000+(row*64)+col);
     682:	90 e4       	ldi	r25, 0x40	; 64
     684:	89 9f       	mul	r24, r25
     686:	60 0d       	add	r22, r0
     688:	11 24       	eor	r1, r1
     68a:	86 2f       	mov	r24, r22
     68c:	80 58       	subi	r24, 0x80	; 128
     68e:	0e 94 82 02 	call	0x504	; 0x504 <LCD_vidWriteCommand>
     692:	08 95       	ret

00000694 <main>:
#include <Keypad.h>
#include <LCD.h>
#include <Timer0.h>
int main(void)
{	u8 keyNumber=noChoice;
	Multimeter_vidInit();
     694:	0e 94 a0 03 	call	0x740	; 0x740 <Multimeter_vidInit>
	Keypad_vidInit();
     698:	0e 94 93 01 	call	0x326	; 0x326 <Keypad_vidInit>
#include <Multimeter.h>
#include <Keypad.h>
#include <LCD.h>
#include <Timer0.h>
int main(void)
{	u8 keyNumber=noChoice;
     69c:	c4 e0       	ldi	r28, 0x04	; 4
	Multimeter_vidInit();
	Keypad_vidInit();
	while (1)
	{	if(keyNumber==noChoice)
     69e:	c4 30       	cpi	r28, 0x04	; 4
     6a0:	19 f4       	brne	.+6      	; 0x6a8 <main+0x14>
			keyNumber=Keypad_u8GetKeyNumber();
     6a2:	0e 94 47 02 	call	0x48e	; 0x48e <Keypad_u8GetKeyNumber>
     6a6:	c8 2f       	mov	r28, r24
		
		switch(keyNumber){
     6a8:	c1 30       	cpi	r28, 0x01	; 1
     6aa:	39 f1       	breq	.+78     	; 0x6fa <main+0x66>
     6ac:	28 f0       	brcs	.+10     	; 0x6b8 <main+0x24>
     6ae:	c2 30       	cpi	r28, 0x02	; 2
     6b0:	f1 f0       	breq	.+60     	; 0x6ee <main+0x5a>
     6b2:	c3 30       	cpi	r28, 0x03	; 3
     6b4:	f9 f0       	breq	.+62     	; 0x6f4 <main+0x60>
     6b6:	f3 cf       	rjmp	.-26     	; 0x69e <main+0xa>
			case DCV:
				DIO_vidSetPinDirection(0,4,0);
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
				DIO_vidSetPinDirection(0,5,1);			// start charging the capacitor
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	65 e0       	ldi	r22, 0x05	; 5
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
				DIO_vidSetPinValue(0,5,1);
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	65 e0       	ldi	r22, 0x05	; 5
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
				Multimeter_vidGetVoltage();
     6e8:	0e 94 ca 03 	call	0x794	; 0x794 <Multimeter_vidGetVoltage>
				break;
     6ec:	d8 cf       	rjmp	.-80     	; 0x69e <main+0xa>
			case DCA:
				Multimeter_vidGetCurrent();
     6ee:	0e 94 46 04 	call	0x88c	; 0x88c <Multimeter_vidGetCurrent>
				break;
     6f2:	d5 cf       	rjmp	.-86     	; 0x69e <main+0xa>
			case Farad:
				Multimeter_vidGetCapacitance();
     6f4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <Multimeter_vidGetCapacitance>
				break;
     6f8:	d2 cf       	rjmp	.-92     	; 0x69e <main+0xa>
			case Ohm:
				Multimeter_vidGetOhm();
     6fa:	0e 94 30 06 	call	0xc60	; 0xc60 <Multimeter_vidGetOhm>
				break;
     6fe:	cf cf       	rjmp	.-98     	; 0x69e <main+0xa>

00000700 <__vector_16>:
#include <DIO.h>
u32 result,inVoltage,resistance,CurrentR; u8 reminder,discharged=0,charged=0; u32 capacitance,test=0;
#define __INTR_ATTRS used, externally_visible
/* complete ADC operation using interrupt */
void __vector_16 (void) __attribute__ ((signal,__INTR_ATTRS));
void __vector_16(void){
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
	result=ADCLow & 0b0000001111111111;
     712:	84 b1       	in	r24, 0x04	; 4
     714:	95 b1       	in	r25, 0x05	; 5
     716:	93 70       	andi	r25, 0x03	; 3
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <result>
     720:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <result+0x1>
     724:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <result+0x2>
     728:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <result+0x3>
	SetBit(ADCSRA,6);		// start conversion
     72c:	36 9a       	sbi	0x06, 6	; 6
}
     72e:	bf 91       	pop	r27
     730:	af 91       	pop	r26
     732:	9f 91       	pop	r25
     734:	8f 91       	pop	r24
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <Multimeter_vidInit>:
/* this function initiate the multimeter */
void Multimeter_vidInit(){
	ADC_vidInit();
     740:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vidInit>
	LCD_vidInit();
     744:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_vidInit>
	DIO_vidSetPinDirection(ohmeterSwitchesPort,R1_Pin,1);			// 100 ohm
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(ohmeterSwitchesPort,R2_Pin,1);			// 1K ohm
     752:	41 e0       	ldi	r20, 0x01	; 1
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(ohmeterSwitchesPort,R3_Pin,1);			// 10K ohm
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	62 e0       	ldi	r22, 0x02	; 2
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(ohmeterSwitchesPort,R4_Pin,1);			// 100K ohm
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	63 e0       	ldi	r22, 0x03	; 3
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(ohmeterSwitchesPort,R5_Pin,1);			// 1M ohm
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	64 e0       	ldi	r22, 0x04	; 4
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
	LCD_vidWriteString("1.DCV    2.Ohm");
     77a:	80 e6       	ldi	r24, 0x60	; 96
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
	LCD_vidSetPosition(1,0);
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
	LCD_vidWriteString("3.DCA    4.farad");
     78a:	8f e6       	ldi	r24, 0x6F	; 111
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
     792:	08 95       	ret

00000794 <Multimeter_vidGetVoltage>:
}
/* this function get the applied voltage using voltage divider circuit */
void Multimeter_vidGetVoltage(){
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
	inVoltage=(result*maxMeasurredVoltage/(ADC_Register));				/* calculate integer number of the applied voltage */
     79c:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <result>
     7a0:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <result+0x1>
     7a4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <result+0x2>
     7a8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <result+0x3>
     7ac:	0e 94 56 09 	call	0x12ac	; 0x12ac <__floatunsisf>
     7b0:	23 e3       	ldi	r18, 0x33	; 51
     7b2:	33 e3       	ldi	r19, 0x33	; 51
     7b4:	4b e9       	ldi	r20, 0x9B	; 155
     7b6:	50 e4       	ldi	r21, 0x40	; 64
     7b8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e6       	ldi	r19, 0x60	; 96
     7c0:	4a e6       	ldi	r20, 0x6A	; 106
     7c2:	56 e4       	ldi	r21, 0x46	; 70
     7c4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e4       	ldi	r19, 0x40	; 64
     7cc:	4c e9       	ldi	r20, 0x9C	; 156
     7ce:	55 e4       	ldi	r21, 0x45	; 69
     7d0:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     7d4:	6b 01       	movw	r12, r22
     7d6:	7c 01       	movw	r14, r24
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e8       	ldi	r20, 0x80	; 128
     7de:	5a e3       	ldi	r21, 0x3A	; 58
     7e0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     7e4:	0e 94 27 09 	call	0x124e	; 0x124e <__fixunssfsi>
     7e8:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <inVoltage>
     7ec:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <inVoltage+0x1>
     7f0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <inVoltage+0x2>
     7f4:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <inVoltage+0x3>
	reminder=(u32)(result*maxMeasurredVoltage*100/(ADC_Register))%100;		/* calculate decimal number (2 places) */
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	48 ec       	ldi	r20, 0xC8	; 200
     7fe:	52 e4       	ldi	r21, 0x42	; 66
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5a e3       	ldi	r21, 0x3A	; 58
     810:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     814:	0e 94 27 09 	call	0x124e	; 0x124e <__fixunssfsi>
     818:	24 e6       	ldi	r18, 0x64	; 100
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     824:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <reminder>
	//resistance=(((inVoltage*100)+reminder)*R1)/((100*maxMeasurredVoltage)-(100*inVoltage+reminder));
		LCD_vidSetPosition(0,0);										/* initiate LCD position */
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteNumber(inVoltage);
     830:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <inVoltage>
     834:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <inVoltage+0x1>
     838:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <inVoltage+0x2>
     83c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <inVoltage+0x3>
     840:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString(".");
     844:	80 e8       	ldi	r24, 0x80	; 128
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		if(reminder<10)													/* make 2 decimal places if the reminder < 10 */
     84c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <reminder>
     850:	8a 30       	cpi	r24, 0x0A	; 10
     852:	20 f4       	brcc	.+8      	; 0x85c <Multimeter_vidGetVoltage+0xc8>
			LCD_vidWriteString("0");
     854:	82 e8       	ldi	r24, 0x82	; 130
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidWriteNumber(reminder);
     85c:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <reminder>
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString("            ");
     86a:	8f ec       	ldi	r24, 0xCF	; 207
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteString("            Volt");
     87a:	84 e8       	ldi	r24, 0x84	; 132
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
}
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	08 95       	ret

0000088c <Multimeter_vidGetCurrent>:
/* this function calculate the current */
void Multimeter_vidGetCurrent(){
     88c:	8f 92       	push	r8
     88e:	9f 92       	push	r9
     890:	af 92       	push	r10
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
	u32 current;
	inVoltage=(result*maxMeasurredVoltage/(ADC_Register));				/* calculate integer number of the applied voltage */
     8a4:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <result>
     8a8:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <result+0x1>
     8ac:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <result+0x2>
     8b0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <result+0x3>
     8b4:	0e 94 56 09 	call	0x12ac	; 0x12ac <__floatunsisf>
     8b8:	23 e3       	ldi	r18, 0x33	; 51
     8ba:	33 e3       	ldi	r19, 0x33	; 51
     8bc:	4b e9       	ldi	r20, 0x9B	; 155
     8be:	50 e4       	ldi	r21, 0x40	; 64
     8c0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e6       	ldi	r19, 0x60	; 96
     8c8:	4a e6       	ldi	r20, 0x6A	; 106
     8ca:	56 e4       	ldi	r21, 0x46	; 70
     8cc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e4       	ldi	r19, 0x40	; 64
     8d4:	4c e9       	ldi	r20, 0x9C	; 156
     8d6:	55 e4       	ldi	r21, 0x45	; 69
     8d8:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     8dc:	4b 01       	movw	r8, r22
     8de:	5c 01       	movw	r10, r24
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e8       	ldi	r20, 0x80	; 128
     8e6:	5a e3       	ldi	r21, 0x3A	; 58
     8e8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     8ec:	0e 94 27 09 	call	0x124e	; 0x124e <__fixunssfsi>
     8f0:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <inVoltage>
     8f4:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <inVoltage+0x1>
     8f8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <inVoltage+0x2>
     8fc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <inVoltage+0x3>
	current=inVoltage/(R1+R2);											/* calculate integer number of the applied current */
     900:	28 e9       	ldi	r18, 0x98	; 152
     902:	3a e3       	ldi	r19, 0x3A	; 58
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     90c:	02 2f       	mov	r16, r18
     90e:	13 2f       	mov	r17, r19
     910:	d4 2f       	mov	r29, r20
     912:	c5 2f       	mov	r28, r21
     914:	c2 2e       	mov	r12, r18
     916:	d3 2e       	mov	r13, r19
     918:	e4 2e       	mov	r14, r20
     91a:	f5 2e       	mov	r15, r21
	reminder=(u32)((result*maxMeasurredVoltage*100/(ADC_Register))/(R1+R2))%10000;	/* calculate decimal number (2 places) */
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	48 ec       	ldi	r20, 0xC8	; 200
     922:	52 e4       	ldi	r21, 0x42	; 66
     924:	c5 01       	movw	r24, r10
     926:	b4 01       	movw	r22, r8
     928:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e8       	ldi	r20, 0x80	; 128
     932:	5a e3       	ldi	r21, 0x3A	; 58
     934:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e6       	ldi	r19, 0x60	; 96
     93c:	4a e6       	ldi	r20, 0x6A	; 106
     93e:	56 e4       	ldi	r21, 0x46	; 70
     940:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     944:	0e 94 27 09 	call	0x124e	; 0x124e <__fixunssfsi>
     948:	20 e1       	ldi	r18, 0x10	; 16
     94a:	37 e2       	ldi	r19, 0x27	; 39
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     954:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <reminder>
	LCD_vidSetPosition(0,0);											/* initiate LCD position */
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
	if(current>1){														/* current in Amp */
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	c8 16       	cp	r12, r24
     964:	d1 04       	cpc	r13, r1
     966:	e1 04       	cpc	r14, r1
     968:	f1 04       	cpc	r15, r1
     96a:	30 f1       	brcs	.+76     	; 0x9b8 <Multimeter_vidGetCurrent+0x12c>
		LCD_vidWriteNumber(current);
     96c:	60 2f       	mov	r22, r16
     96e:	71 2f       	mov	r23, r17
     970:	8d 2f       	mov	r24, r29
     972:	9c 2f       	mov	r25, r28
     974:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString(".");
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		if(reminder<10)													/* make 2 decimal places if the reminder < 10 */
     980:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <reminder>
     984:	8a 30       	cpi	r24, 0x0A	; 10
     986:	20 f4       	brcc	.+8      	; 0x990 <Multimeter_vidGetCurrent+0x104>
		LCD_vidWriteString("0");
     988:	82 e8       	ldi	r24, 0x82	; 130
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidWriteNumber(reminder);
     990:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <reminder>
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString("            ");
     99e:	8f ec       	ldi	r24, 0xCF	; 207
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteString("            Amp");
     9ae:	85 e9       	ldi	r24, 0x95	; 149
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
     9b6:	44 c0       	rjmp	.+136    	; 0xa40 <Multimeter_vidGetCurrent+0x1b4>
	}
	else{																/* current in MicroAmp */
		LCD_vidWriteNumber((result*maxMeasurredVoltage*100/(ADC_Register))*10000/(R1+R2));	/* calculate the current in MicroAmp */
     9b8:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <result>
     9bc:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <result+0x1>
     9c0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <result+0x2>
     9c4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <result+0x3>
     9c8:	0e 94 56 09 	call	0x12ac	; 0x12ac <__floatunsisf>
     9cc:	23 e3       	ldi	r18, 0x33	; 51
     9ce:	33 e3       	ldi	r19, 0x33	; 51
     9d0:	4b e9       	ldi	r20, 0x9B	; 155
     9d2:	50 e4       	ldi	r21, 0x40	; 64
     9d4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e6       	ldi	r19, 0x60	; 96
     9dc:	4a e6       	ldi	r20, 0x6A	; 106
     9de:	56 e4       	ldi	r21, 0x46	; 70
     9e0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e4       	ldi	r19, 0x40	; 64
     9e8:	4c e9       	ldi	r20, 0x9C	; 156
     9ea:	55 e4       	ldi	r21, 0x45	; 69
     9ec:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	48 ec       	ldi	r20, 0xC8	; 200
     9f6:	52 e4       	ldi	r21, 0x42	; 66
     9f8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e8       	ldi	r20, 0x80	; 128
     a02:	5a e3       	ldi	r21, 0x3A	; 58
     a04:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e4       	ldi	r19, 0x40	; 64
     a0c:	4c e1       	ldi	r20, 0x1C	; 28
     a0e:	56 e4       	ldi	r21, 0x46	; 70
     a10:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e6       	ldi	r19, 0x60	; 96
     a18:	4a e6       	ldi	r20, 0x6A	; 106
     a1a:	56 e4       	ldi	r21, 0x46	; 70
     a1c:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     a20:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixsfsi>
     a24:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString("               ");
     a28:	8c ec       	ldi	r24, 0xCC	; 204
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteString("        MicroAmp");
     a38:	85 ea       	ldi	r24, 0xA5	; 165
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
	}
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	bf 90       	pop	r11
     a52:	af 90       	pop	r10
     a54:	9f 90       	pop	r9
     a56:	8f 90       	pop	r8
     a58:	08 95       	ret

00000a5a <Multimeter_vidGetCapacitance>:
void Multimeter_vidGetCapacitance(){
	if(!discharged){
     a5a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <discharged>
     a5e:	81 11       	cpse	r24, r1
     a60:	32 c0       	rjmp	.+100    	; 0xac6 <Multimeter_vidGetCapacitance+0x6c>
		DIO_vidSetPinDirection(0,4,1);
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	64 e0       	ldi	r22, 0x04	; 4
     a66:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
		DIO_vidSetPinDirection(0,5,1);			// discharge capacitor
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	65 e0       	ldi	r22, 0x05	; 5
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
		DIO_vidSetPinValue(0,5,0);
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	65 e0       	ldi	r22, 0x05	; 5
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
	}
	if(!discharged && result==0) {				// making sure the capacitor is discharged 
     a7e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <discharged>
     a82:	81 11       	cpse	r24, r1
     a84:	20 c0       	rjmp	.+64     	; 0xac6 <Multimeter_vidGetCapacitance+0x6c>
     a86:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <result>
     a8a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <result+0x1>
     a8e:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <result+0x2>
     a92:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <result+0x3>
     a96:	89 2b       	or	r24, r25
     a98:	8a 2b       	or	r24, r26
     a9a:	8b 2b       	or	r24, r27
     a9c:	a1 f4       	brne	.+40     	; 0xac6 <Multimeter_vidGetCapacitance+0x6c>
		discharged=1;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <discharged>
		DIO_vidSetPinDirection(0,4,0);
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
		DIO_vidSetPinDirection(0,5,1);			// start charging the capacitor
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	65 e0       	ldi	r22, 0x05	; 5
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_vidSetPinDirection>
		DIO_vidSetPinValue(0,5,1);
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	65 e0       	ldi	r22, 0x05	; 5
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
		Timer0_vid_CTC_Init();					// initializing the timer to calculate time constanct (TC)
     ac2:	0e 94 1f 08 	call	0x103e	; 0x103e <Timer0_vid_CTC_Init>
	}	

	LCD_vidSetPosition(0,0);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
	if( discharged && !charged && ((result) >= 646)){			// 646 = 63*1024/100     
     ace:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <discharged>
     ad2:	88 23       	and	r24, r24
     ad4:	91 f1       	breq	.+100    	; 0xb3a <Multimeter_vidGetCapacitance+0xe0>
     ad6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <charged>
     ada:	81 11       	cpse	r24, r1
     adc:	2e c0       	rjmp	.+92     	; 0xb3a <Multimeter_vidGetCapacitance+0xe0>
     ade:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <result>
     ae2:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <result+0x1>
     ae6:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <result+0x2>
     aea:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <result+0x3>
     aee:	86 38       	cpi	r24, 0x86	; 134
     af0:	92 40       	sbci	r25, 0x02	; 2
     af2:	a1 05       	cpc	r26, r1
     af4:	b1 05       	cpc	r27, r1
     af6:	08 f1       	brcs	.+66     	; 0xb3a <Multimeter_vidGetCapacitance+0xe0>
		charged=1;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <charged>
		LCD_vidWriteNumber(Timer0_u16GetTime()*1000/faradMeterResistor);	// TC=RC
     afe:	0e 94 3a 08 	call	0x1074	; 0x1074 <Timer0_u16GetTime>
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	a8 ee       	ldi	r26, 0xE8	; 232
     b08:	b3 e0       	ldi	r27, 0x03	; 3
     b0a:	0e 94 92 0a 	call	0x1524	; 0x1524 <__muluhisi3>
     b0e:	20 e1       	ldi	r18, 0x10	; 16
     b10:	37 e2       	ldi	r19, 0x27	; 39
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     b1a:	ca 01       	movw	r24, r20
     b1c:	b9 01       	movw	r22, r18
     b1e:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString("               ");
     b22:	8c ec       	ldi	r24, 0xCC	; 204
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteString("      MicroFarad");
     b32:	86 eb       	ldi	r24, 0xB6	; 182
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
     b3a:	08 95       	ret

00000b3c <changeResistance>:
	}
}

/* this function change the resistance (R1) in order to calculate the required Resistance (R2) */
void changeResistance(u8 num){
	switch(num){
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	09 f4       	brne	.+2      	; 0xb42 <changeResistance+0x6>
     b40:	41 c0       	rjmp	.+130    	; 0xbc4 <changeResistance+0x88>
     b42:	28 f4       	brcc	.+10     	; 0xb4e <changeResistance+0x12>
     b44:	88 23       	and	r24, r24
     b46:	51 f0       	breq	.+20     	; 0xb5c <changeResistance+0x20>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	11 f1       	breq	.+68     	; 0xb90 <changeResistance+0x54>
     b4c:	08 95       	ret
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	09 f4       	brne	.+2      	; 0xb54 <changeResistance+0x18>
     b52:	52 c0       	rjmp	.+164    	; 0xbf8 <changeResistance+0xbc>
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	09 f4       	brne	.+2      	; 0xb5a <changeResistance+0x1e>
     b58:	69 c0       	rjmp	.+210    	; 0xc2c <changeResistance+0xf0>
     b5a:	08 95       	ret
		case R1_Pin:
			DIO_vidSetPinValue(ohmeterSwitchesPort,R1_Pin,1);
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R2_Pin,0);
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R3_Pin,0);			/* activate 100 ohm transistor */
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R4_Pin,0);
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R5_Pin,0);
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	64 e0       	ldi	r22, 0x04	; 4
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			break;
     b8e:	08 95       	ret
		case R2_Pin:
			DIO_vidSetPinValue(ohmeterSwitchesPort,R1_Pin,0);
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R2_Pin,1);
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R3_Pin,0);			/* activate 1 K ohm transistor */
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R4_Pin,0);
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	63 e0       	ldi	r22, 0x03	; 3
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R5_Pin,0);
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	64 e0       	ldi	r22, 0x04	; 4
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			break;
     bc2:	08 95       	ret
		case R3_Pin:
			DIO_vidSetPinValue(ohmeterSwitchesPort,R1_Pin,0);
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R2_Pin,0);
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R3_Pin,1);			/* activate 10 K ohm transistor */
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R4_Pin,0);
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R5_Pin,0);
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	64 e0       	ldi	r22, 0x04	; 4
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			break;
     bf6:	08 95       	ret
		case R4_Pin:
			DIO_vidSetPinValue(ohmeterSwitchesPort,R1_Pin,0);
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R2_Pin,0);
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R3_Pin,0);			/* activate 100 K ohm transistor */
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	62 e0       	ldi	r22, 0x02	; 2
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R4_Pin,1);
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R5_Pin,0);
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	64 e0       	ldi	r22, 0x04	; 4
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			break;
     c2a:	08 95       	ret
		case R5_Pin:
			DIO_vidSetPinValue(ohmeterSwitchesPort,R1_Pin,0);
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R2_Pin,0);
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R3_Pin,0);			/* activate 1 M ohm transistor */
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R4_Pin,0);
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	63 e0       	ldi	r22, 0x03	; 3
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
			DIO_vidSetPinValue(ohmeterSwitchesPort,R5_Pin,1);
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	64 e0       	ldi	r22, 0x04	; 4
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_vidSetPinValue>
     c5e:	08 95       	ret

00000c60 <Multimeter_vidGetOhm>:
		LCD_vidSetPosition(1,0);
		LCD_vidWriteString("      MicroFarad");
	}
}
/* this function calculate the resistance using 5 Resistors */
void Multimeter_vidGetOhm(){
     c60:	8f 92       	push	r8
     c62:	9f 92       	push	r9
     c64:	af 92       	push	r10
     c66:	bf 92       	push	r11
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
	changeResistance(R5_Pin);							// R1=1M
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 9e 05 	call	0xb3c	; 0xb3c <changeResistance>
	if(result>=100)
     c78:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <result>
     c7c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <result+0x1>
     c80:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <result+0x2>
     c84:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <result+0x3>
     c88:	84 36       	cpi	r24, 0x64	; 100
     c8a:	91 05       	cpc	r25, r1
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	68 f0       	brcs	.+26     	; 0xcac <Multimeter_vidGetOhm+0x4c>
		CurrentR=R_R5;
     c92:	80 e4       	ldi	r24, 0x40	; 64
     c94:	92 e4       	ldi	r25, 0x42	; 66
     c96:	af e0       	ldi	r26, 0x0F	; 15
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <CurrentR>
     c9e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <CurrentR+0x1>
     ca2:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <CurrentR+0x2>
     ca6:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <CurrentR+0x3>
     caa:	77 c0       	rjmp	.+238    	; 0xd9a <Multimeter_vidGetOhm+0x13a>
	else {
		changeResistance(R4_Pin);						// R1=100K
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <changeResistance>
		if(result>=100)
     cb4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <result>
     cb8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <result+0x1>
     cbc:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <result+0x2>
     cc0:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <result+0x3>
     cc4:	84 36       	cpi	r24, 0x64	; 100
     cc6:	91 05       	cpc	r25, r1
     cc8:	a1 05       	cpc	r26, r1
     cca:	b1 05       	cpc	r27, r1
     ccc:	68 f0       	brcs	.+26     	; 0xce8 <Multimeter_vidGetOhm+0x88>
			CurrentR=R_R4;
     cce:	80 ea       	ldi	r24, 0xA0	; 160
     cd0:	96 e8       	ldi	r25, 0x86	; 134
     cd2:	a1 e0       	ldi	r26, 0x01	; 1
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <CurrentR>
     cda:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <CurrentR+0x1>
     cde:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <CurrentR+0x2>
     ce2:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <CurrentR+0x3>
     ce6:	59 c0       	rjmp	.+178    	; 0xd9a <Multimeter_vidGetOhm+0x13a>
		else{
			changeResistance(R3_Pin);					// R1=10K
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 9e 05 	call	0xb3c	; 0xb3c <changeResistance>
			if(result>=100)
     cf0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <result>
     cf4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <result+0x1>
     cf8:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <result+0x2>
     cfc:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <result+0x3>
     d00:	84 36       	cpi	r24, 0x64	; 100
     d02:	91 05       	cpc	r25, r1
     d04:	a1 05       	cpc	r26, r1
     d06:	b1 05       	cpc	r27, r1
     d08:	68 f0       	brcs	.+26     	; 0xd24 <Multimeter_vidGetOhm+0xc4>
				CurrentR=R_R3;
     d0a:	80 e1       	ldi	r24, 0x10	; 16
     d0c:	97 e2       	ldi	r25, 0x27	; 39
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <CurrentR>
     d16:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <CurrentR+0x1>
     d1a:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <CurrentR+0x2>
     d1e:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <CurrentR+0x3>
     d22:	3b c0       	rjmp	.+118    	; 0xd9a <Multimeter_vidGetOhm+0x13a>
			else{
				changeResistance(R2_Pin);				// R1=1K
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 9e 05 	call	0xb3c	; 0xb3c <changeResistance>
				if(result>=100)
     d2c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <result>
     d30:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <result+0x1>
     d34:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <result+0x2>
     d38:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <result+0x3>
     d3c:	84 36       	cpi	r24, 0x64	; 100
     d3e:	91 05       	cpc	r25, r1
     d40:	a1 05       	cpc	r26, r1
     d42:	b1 05       	cpc	r27, r1
     d44:	68 f0       	brcs	.+26     	; 0xd60 <Multimeter_vidGetOhm+0x100>
					CurrentR=R_R2;
     d46:	88 ee       	ldi	r24, 0xE8	; 232
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <CurrentR>
     d52:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <CurrentR+0x1>
     d56:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <CurrentR+0x2>
     d5a:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <CurrentR+0x3>
     d5e:	1d c0       	rjmp	.+58     	; 0xd9a <Multimeter_vidGetOhm+0x13a>
				else{
					changeResistance(R1_Pin);			// R1=100 
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 9e 05 	call	0xb3c	; 0xb3c <changeResistance>
					if(result>=100)
     d68:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <result>
     d6c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <result+0x1>
     d70:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <result+0x2>
     d74:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <result+0x3>
     d78:	84 36       	cpi	r24, 0x64	; 100
     d7a:	91 05       	cpc	r25, r1
     d7c:	a1 05       	cpc	r26, r1
     d7e:	b1 05       	cpc	r27, r1
     d80:	60 f0       	brcs	.+24     	; 0xd9a <Multimeter_vidGetOhm+0x13a>
						CurrentR=R_R1;
     d82:	84 e6       	ldi	r24, 0x64	; 100
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <CurrentR>
     d8e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <CurrentR+0x1>
     d92:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <CurrentR+0x2>
     d96:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <CurrentR+0x3>
				}
			}	
		}
	}
	if(result>=950)			/* check if resistor is connected, 950 =1024 - voltage drop due to transistor(.7 V) */
     d9a:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <result>
     d9e:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <result+0x1>
     da2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <result+0x2>
     da6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <result+0x3>
     daa:	66 3b       	cpi	r22, 0xB6	; 182
     dac:	23 e0       	ldi	r18, 0x03	; 3
     dae:	72 07       	cpc	r23, r18
     db0:	81 05       	cpc	r24, r1
     db2:	91 05       	cpc	r25, r1
     db4:	48 f0       	brcs	.+18     	; 0xdc8 <Multimeter_vidGetOhm+0x168>
		resistance=0;
     db6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <resistance>
     dba:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <resistance+0x1>
     dbe:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <resistance+0x2>
     dc2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <resistance+0x3>
     dc6:	38 c0       	rjmp	.+112    	; 0xe38 <Multimeter_vidGetOhm+0x1d8>
	else{
	/* resistance (R2)=Vout*R1 / Vin-Vout */
	/* Vout = ADC_result*(maxMicroInVoltage+transistorDropVoltage)/ADC_Register */
	resistance=(((result*(maxMicroInVoltage+transistorDropVoltage)/ADC_Register))*CurrentR)/(maxMicroInVoltage-((result*(maxMicroInVoltage+transistorDropVoltage)/ADC_Register)));
     dc8:	0e 94 56 09 	call	0x12ac	; 0x12ac <__floatunsisf>
     dcc:	29 e9       	ldi	r18, 0x99	; 153
     dce:	39 e9       	ldi	r19, 0x99	; 153
     dd0:	41 eb       	ldi	r20, 0xB1	; 177
     dd2:	50 e4       	ldi	r21, 0x40	; 64
     dd4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e8       	ldi	r20, 0x80	; 128
     dde:	5a e3       	ldi	r21, 0x3A	; 58
     de0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     de4:	6b 01       	movw	r12, r22
     de6:	7c 01       	movw	r14, r24
     de8:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <CurrentR>
     dec:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <CurrentR+0x1>
     df0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <CurrentR+0x2>
     df4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <CurrentR+0x3>
     df8:	0e 94 56 09 	call	0x12ac	; 0x12ac <__floatunsisf>
     dfc:	a7 01       	movw	r20, r14
     dfe:	96 01       	movw	r18, r12
     e00:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3>
     e04:	4b 01       	movw	r8, r22
     e06:	5c 01       	movw	r10, r24
     e08:	a7 01       	movw	r20, r14
     e0a:	96 01       	movw	r18, r12
     e0c:	63 e3       	ldi	r22, 0x33	; 51
     e0e:	73 e3       	ldi	r23, 0x33	; 51
     e10:	8b e9       	ldi	r24, 0x9B	; 155
     e12:	90 e4       	ldi	r25, 0x40	; 64
     e14:	0e 94 41 08 	call	0x1082	; 0x1082 <__subsf3>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	c5 01       	movw	r24, r10
     e1e:	b4 01       	movw	r22, r8
     e20:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     e24:	0e 94 27 09 	call	0x124e	; 0x124e <__fixunssfsi>
     e28:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <resistance>
     e2c:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <resistance+0x1>
     e30:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <resistance+0x2>
     e34:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <resistance+0x3>
	}
	LCD_vidSetPosition(0,0);
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
	/* if the resistance < 1000 show it in Ohm */
	if(resistance<1000){
     e40:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <resistance>
     e44:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <resistance+0x1>
     e48:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <resistance+0x2>
     e4c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <resistance+0x3>
     e50:	68 3e       	cpi	r22, 0xE8	; 232
     e52:	23 e0       	ldi	r18, 0x03	; 3
     e54:	72 07       	cpc	r23, r18
     e56:	81 05       	cpc	r24, r1
     e58:	91 05       	cpc	r25, r1
     e5a:	78 f4       	brcc	.+30     	; 0xe7a <Multimeter_vidGetOhm+0x21a>
		LCD_vidWriteNumber(resistance);
     e5c:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString("                    ");
     e60:	87 ec       	ldi	r24, 0xC7	; 199
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteString("             Ohm");
     e70:	8c ed       	ldi	r24, 0xDC	; 220
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
     e78:	c2 c0       	rjmp	.+388    	; 0xffe <Multimeter_vidGetOhm+0x39e>
	}
	/* if the resistance < 1000000 show it in Kilo Ohm */
	else if(resistance<1000000){
     e7a:	60 34       	cpi	r22, 0x40	; 64
     e7c:	22 e4       	ldi	r18, 0x42	; 66
     e7e:	72 07       	cpc	r23, r18
     e80:	2f e0       	ldi	r18, 0x0F	; 15
     e82:	82 07       	cpc	r24, r18
     e84:	91 05       	cpc	r25, r1
     e86:	08 f0       	brcs	.+2      	; 0xe8a <Multimeter_vidGetOhm+0x22a>
     e88:	5d c0       	rjmp	.+186    	; 0xf44 <Multimeter_vidGetOhm+0x2e4>
		LCD_vidWriteNumber(resistance/1000);
     e8a:	0f 2e       	mov	r0, r31
     e8c:	f8 ee       	ldi	r31, 0xE8	; 232
     e8e:	cf 2e       	mov	r12, r31
     e90:	f3 e0       	ldi	r31, 0x03	; 3
     e92:	df 2e       	mov	r13, r31
     e94:	e1 2c       	mov	r14, r1
     e96:	f1 2c       	mov	r15, r1
     e98:	f0 2d       	mov	r31, r0
     e9a:	a7 01       	movw	r20, r14
     e9c:	96 01       	movw	r18, r12
     e9e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     ea2:	ca 01       	movw	r24, r20
     ea4:	b9 01       	movw	r22, r18
     ea6:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>

		LCD_vidWriteString(".");
     eaa:	80 e8       	ldi	r24, 0x80	; 128
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		if(resistance%1000<10)													/* make 3 decimal places if the reminder < 10 */
     eb2:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <resistance>
     eb6:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <resistance+0x1>
     eba:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <resistance+0x2>
     ebe:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <resistance+0x3>
     ec2:	a7 01       	movw	r20, r14
     ec4:	96 01       	movw	r18, r12
     ec6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     eca:	6a 30       	cpi	r22, 0x0A	; 10
     ecc:	71 05       	cpc	r23, r1
     ece:	81 05       	cpc	r24, r1
     ed0:	91 05       	cpc	r25, r1
     ed2:	20 f4       	brcc	.+8      	; 0xedc <Multimeter_vidGetOhm+0x27c>
		LCD_vidWriteString("0");
     ed4:	82 e8       	ldi	r24, 0x82	; 130
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		if(resistance%1000<100)													/* make 3 decimal places if the reminder < 100 */
     edc:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <resistance>
     ee0:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <resistance+0x1>
     ee4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <resistance+0x2>
     ee8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <resistance+0x3>
     eec:	28 ee       	ldi	r18, 0xE8	; 232
     eee:	33 e0       	ldi	r19, 0x03	; 3
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     ef8:	64 36       	cpi	r22, 0x64	; 100
     efa:	71 05       	cpc	r23, r1
     efc:	81 05       	cpc	r24, r1
     efe:	91 05       	cpc	r25, r1
     f00:	20 f4       	brcc	.+8      	; 0xf0a <Multimeter_vidGetOhm+0x2aa>
		LCD_vidWriteString("0");
     f02:	82 e8       	ldi	r24, 0x82	; 130
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidWriteNumber(resistance%1000);
     f0a:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <resistance>
     f0e:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <resistance+0x1>
     f12:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <resistance+0x2>
     f16:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <resistance+0x3>
     f1a:	28 ee       	ldi	r18, 0xE8	; 232
     f1c:	33 e0       	ldi	r19, 0x03	; 3
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     f26:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString("            ");
     f2a:	8f ec       	ldi	r24, 0xCF	; 207
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteString("           K Ohm");
     f3a:	8d ee       	ldi	r24, 0xED	; 237
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
     f42:	5d c0       	rjmp	.+186    	; 0xffe <Multimeter_vidGetOhm+0x39e>
	}
	/* if the resistance < 1000 show it in Mega Ohm */
	else {
		LCD_vidWriteNumber(resistance/1000000);
     f44:	0f 2e       	mov	r0, r31
     f46:	f0 e4       	ldi	r31, 0x40	; 64
     f48:	cf 2e       	mov	r12, r31
     f4a:	f2 e4       	ldi	r31, 0x42	; 66
     f4c:	df 2e       	mov	r13, r31
     f4e:	ff e0       	ldi	r31, 0x0F	; 15
     f50:	ef 2e       	mov	r14, r31
     f52:	f1 2c       	mov	r15, r1
     f54:	f0 2d       	mov	r31, r0
     f56:	a7 01       	movw	r20, r14
     f58:	96 01       	movw	r18, r12
     f5a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     f5e:	ca 01       	movw	r24, r20
     f60:	b9 01       	movw	r22, r18
     f62:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString(".");
     f66:	80 e8       	ldi	r24, 0x80	; 128
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		if(resistance%1000000<10)													/* make 3 decimal places if the reminder < 10 */
     f6e:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <resistance>
     f72:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <resistance+0x1>
     f76:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <resistance+0x2>
     f7a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <resistance+0x3>
     f7e:	a7 01       	movw	r20, r14
     f80:	96 01       	movw	r18, r12
     f82:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     f86:	6a 30       	cpi	r22, 0x0A	; 10
     f88:	71 05       	cpc	r23, r1
     f8a:	81 05       	cpc	r24, r1
     f8c:	91 05       	cpc	r25, r1
     f8e:	20 f4       	brcc	.+8      	; 0xf98 <Multimeter_vidGetOhm+0x338>
		LCD_vidWriteString("0");
     f90:	82 e8       	ldi	r24, 0x82	; 130
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		if(resistance%1000000<100)													/* make 3 decimal places if the reminder < 100 */
     f98:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <resistance>
     f9c:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <resistance+0x1>
     fa0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <resistance+0x2>
     fa4:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <resistance+0x3>
     fa8:	20 e4       	ldi	r18, 0x40	; 64
     faa:	32 e4       	ldi	r19, 0x42	; 66
     fac:	4f e0       	ldi	r20, 0x0F	; 15
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     fb4:	64 36       	cpi	r22, 0x64	; 100
     fb6:	71 05       	cpc	r23, r1
     fb8:	81 05       	cpc	r24, r1
     fba:	91 05       	cpc	r25, r1
     fbc:	20 f4       	brcc	.+8      	; 0xfc6 <Multimeter_vidGetOhm+0x366>
		LCD_vidWriteString("0");
     fbe:	82 e8       	ldi	r24, 0x82	; 130
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidWriteNumber(resistance%1000000);
     fc6:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <resistance>
     fca:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <resistance+0x1>
     fce:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <resistance+0x2>
     fd2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <resistance+0x3>
     fd6:	20 e4       	ldi	r18, 0x40	; 64
     fd8:	32 e4       	ldi	r19, 0x42	; 66
     fda:	4f e0       	ldi	r20, 0x0F	; 15
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     fe2:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vidWriteNumber>
		LCD_vidWriteString("            ");
     fe6:	8f ec       	ldi	r24, 0xCF	; 207
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	0e 94 41 03 	call	0x682	; 0x682 <LCD_vidSetPosition>
		LCD_vidWriteString("           M Ohm");		
     ff6:	8e ef       	ldi	r24, 0xFE	; 254
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_vidWriteString>
	}
}
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	9f 90       	pop	r9
    100c:	8f 90       	pop	r8
    100e:	08 95       	ret

00001010 <__vector_10>:
#include <Timer0.h>
#include <Types.h>
u16 milliSeconds;
#define __INTR_ATTRS used, externally_visible
void __vector_10(void) __attribute__ ((signal,__INTR_ATTRS));
void __vector_10(void){
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
	milliSeconds++;
    101e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <milliSeconds>
    1022:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <milliSeconds+0x1>
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <milliSeconds+0x1>
    102c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <milliSeconds>
	//LCD_vidWriteString("hi");
}
    1030:	9f 91       	pop	r25
    1032:	8f 91       	pop	r24
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <Timer0_vid_CTC_Init>:

void Timer0_vid_CTC_Init(){
	SetBit(TCCR0,7);  /* non PWM Mode */
    103e:	83 b7       	in	r24, 0x33	; 51
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	83 bf       	out	0x33, r24	; 51
	
	ClrBit(TCCR0,6);  /*CTC Mode */
    1044:	83 b7       	in	r24, 0x33	; 51
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,3);
    104a:	83 b7       	in	r24, 0x33	; 51
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	83 bf       	out	0x33, r24	; 51
	
	SetBit(TCCR0,0);
    1050:	83 b7       	in	r24, 0x33	; 51
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,1);  /* prescaler 64 */
    1056:	83 b7       	in	r24, 0x33	; 51
    1058:	82 60       	ori	r24, 0x02	; 2
    105a:	83 bf       	out	0x33, r24	; 51
	ClrBit(TCCR0,2);
    105c:	83 b7       	in	r24, 0x33	; 51
    105e:	8b 7f       	andi	r24, 0xFB	; 251
    1060:	83 bf       	out	0x33, r24	; 51
	
	
	
	SetBit(TIMSK,1);  /* enable CTC interrupt */
    1062:	89 b7       	in	r24, 0x39	; 57
    1064:	82 60       	ori	r24, 0x02	; 2
    1066:	89 bf       	out	0x39, r24	; 57
	
	OCR0=124;		  /* top value */
    1068:	8c e7       	ldi	r24, 0x7C	; 124
    106a:	8c bf       	out	0x3c, r24	; 60
	
	SetBit(SREG,7);   /* enable global interrupt */
    106c:	8f b7       	in	r24, 0x3f	; 63
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	8f bf       	out	0x3f, r24	; 63
    1072:	08 95       	ret

00001074 <Timer0_u16GetTime>:
}

u32 Timer0_u16GetTime(){
	return milliSeconds;
    1074:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <milliSeconds>
    1078:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <milliSeconds+0x1>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	08 95       	ret

00001082 <__subsf3>:
    1082:	50 58       	subi	r21, 0x80	; 128

00001084 <__addsf3>:
    1084:	bb 27       	eor	r27, r27
    1086:	aa 27       	eor	r26, r26
    1088:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__addsf3x>
    108c:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_round>
    1090:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_pscA>
    1094:	38 f0       	brcs	.+14     	; 0x10a4 <__addsf3+0x20>
    1096:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_pscB>
    109a:	20 f0       	brcs	.+8      	; 0x10a4 <__addsf3+0x20>
    109c:	39 f4       	brne	.+14     	; 0x10ac <__addsf3+0x28>
    109e:	9f 3f       	cpi	r25, 0xFF	; 255
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <__addsf3+0x24>
    10a2:	26 f4       	brtc	.+8      	; 0x10ac <__addsf3+0x28>
    10a4:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__fp_nan>
    10a8:	0e f4       	brtc	.+2      	; 0x10ac <__addsf3+0x28>
    10aa:	e0 95       	com	r30
    10ac:	e7 fb       	bst	r30, 7
    10ae:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_inf>

000010b2 <__addsf3x>:
    10b2:	e9 2f       	mov	r30, r25
    10b4:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_split3>
    10b8:	58 f3       	brcs	.-42     	; 0x1090 <__addsf3+0xc>
    10ba:	ba 17       	cp	r27, r26
    10bc:	62 07       	cpc	r22, r18
    10be:	73 07       	cpc	r23, r19
    10c0:	84 07       	cpc	r24, r20
    10c2:	95 07       	cpc	r25, r21
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__addsf3x+0x1c>
    10c6:	79 f4       	brne	.+30     	; 0x10e6 <__addsf3x+0x34>
    10c8:	a6 f5       	brtc	.+104    	; 0x1132 <__addsf3x+0x80>
    10ca:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_zero>
    10ce:	0e f4       	brtc	.+2      	; 0x10d2 <__addsf3x+0x20>
    10d0:	e0 95       	com	r30
    10d2:	0b 2e       	mov	r0, r27
    10d4:	ba 2f       	mov	r27, r26
    10d6:	a0 2d       	mov	r26, r0
    10d8:	0b 01       	movw	r0, r22
    10da:	b9 01       	movw	r22, r18
    10dc:	90 01       	movw	r18, r0
    10de:	0c 01       	movw	r0, r24
    10e0:	ca 01       	movw	r24, r20
    10e2:	a0 01       	movw	r20, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	ff 27       	eor	r31, r31
    10e8:	59 1b       	sub	r21, r25
    10ea:	99 f0       	breq	.+38     	; 0x1112 <__addsf3x+0x60>
    10ec:	59 3f       	cpi	r21, 0xF9	; 249
    10ee:	50 f4       	brcc	.+20     	; 0x1104 <__addsf3x+0x52>
    10f0:	50 3e       	cpi	r21, 0xE0	; 224
    10f2:	68 f1       	brcs	.+90     	; 0x114e <__addsf3x+0x9c>
    10f4:	1a 16       	cp	r1, r26
    10f6:	f0 40       	sbci	r31, 0x00	; 0
    10f8:	a2 2f       	mov	r26, r18
    10fa:	23 2f       	mov	r18, r19
    10fc:	34 2f       	mov	r19, r20
    10fe:	44 27       	eor	r20, r20
    1100:	58 5f       	subi	r21, 0xF8	; 248
    1102:	f3 cf       	rjmp	.-26     	; 0x10ea <__addsf3x+0x38>
    1104:	46 95       	lsr	r20
    1106:	37 95       	ror	r19
    1108:	27 95       	ror	r18
    110a:	a7 95       	ror	r26
    110c:	f0 40       	sbci	r31, 0x00	; 0
    110e:	53 95       	inc	r21
    1110:	c9 f7       	brne	.-14     	; 0x1104 <__addsf3x+0x52>
    1112:	7e f4       	brtc	.+30     	; 0x1132 <__addsf3x+0x80>
    1114:	1f 16       	cp	r1, r31
    1116:	ba 0b       	sbc	r27, r26
    1118:	62 0b       	sbc	r22, r18
    111a:	73 0b       	sbc	r23, r19
    111c:	84 0b       	sbc	r24, r20
    111e:	ba f0       	brmi	.+46     	; 0x114e <__addsf3x+0x9c>
    1120:	91 50       	subi	r25, 0x01	; 1
    1122:	a1 f0       	breq	.+40     	; 0x114c <__addsf3x+0x9a>
    1124:	ff 0f       	add	r31, r31
    1126:	bb 1f       	adc	r27, r27
    1128:	66 1f       	adc	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	c2 f7       	brpl	.-16     	; 0x1120 <__addsf3x+0x6e>
    1130:	0e c0       	rjmp	.+28     	; 0x114e <__addsf3x+0x9c>
    1132:	ba 0f       	add	r27, r26
    1134:	62 1f       	adc	r22, r18
    1136:	73 1f       	adc	r23, r19
    1138:	84 1f       	adc	r24, r20
    113a:	48 f4       	brcc	.+18     	; 0x114e <__addsf3x+0x9c>
    113c:	87 95       	ror	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b7 95       	ror	r27
    1144:	f7 95       	ror	r31
    1146:	9e 3f       	cpi	r25, 0xFE	; 254
    1148:	08 f0       	brcs	.+2      	; 0x114c <__addsf3x+0x9a>
    114a:	b0 cf       	rjmp	.-160    	; 0x10ac <__addsf3+0x28>
    114c:	93 95       	inc	r25
    114e:	88 0f       	add	r24, r24
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__addsf3x+0xa2>
    1152:	99 27       	eor	r25, r25
    1154:	ee 0f       	add	r30, r30
    1156:	97 95       	ror	r25
    1158:	87 95       	ror	r24
    115a:	08 95       	ret

0000115c <__divsf3>:
    115c:	0e 94 c2 08 	call	0x1184	; 0x1184 <__divsf3x>
    1160:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_round>
    1164:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_pscB>
    1168:	58 f0       	brcs	.+22     	; 0x1180 <__divsf3+0x24>
    116a:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_pscA>
    116e:	40 f0       	brcs	.+16     	; 0x1180 <__divsf3+0x24>
    1170:	29 f4       	brne	.+10     	; 0x117c <__divsf3+0x20>
    1172:	5f 3f       	cpi	r21, 0xFF	; 255
    1174:	29 f0       	breq	.+10     	; 0x1180 <__divsf3+0x24>
    1176:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_inf>
    117a:	51 11       	cpse	r21, r1
    117c:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_szero>
    1180:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__fp_nan>

00001184 <__divsf3x>:
    1184:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_split3>
    1188:	68 f3       	brcs	.-38     	; 0x1164 <__divsf3+0x8>

0000118a <__divsf3_pse>:
    118a:	99 23       	and	r25, r25
    118c:	b1 f3       	breq	.-20     	; 0x117a <__divsf3+0x1e>
    118e:	55 23       	and	r21, r21
    1190:	91 f3       	breq	.-28     	; 0x1176 <__divsf3+0x1a>
    1192:	95 1b       	sub	r25, r21
    1194:	55 0b       	sbc	r21, r21
    1196:	bb 27       	eor	r27, r27
    1198:	aa 27       	eor	r26, r26
    119a:	62 17       	cp	r22, r18
    119c:	73 07       	cpc	r23, r19
    119e:	84 07       	cpc	r24, r20
    11a0:	38 f0       	brcs	.+14     	; 0x11b0 <__divsf3_pse+0x26>
    11a2:	9f 5f       	subi	r25, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	aa 1f       	adc	r26, r26
    11ae:	a9 f3       	breq	.-22     	; 0x119a <__divsf3_pse+0x10>
    11b0:	35 d0       	rcall	.+106    	; 0x121c <__divsf3_pse+0x92>
    11b2:	0e 2e       	mov	r0, r30
    11b4:	3a f0       	brmi	.+14     	; 0x11c4 <__divsf3_pse+0x3a>
    11b6:	e0 e8       	ldi	r30, 0x80	; 128
    11b8:	32 d0       	rcall	.+100    	; 0x121e <__divsf3_pse+0x94>
    11ba:	91 50       	subi	r25, 0x01	; 1
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	e6 95       	lsr	r30
    11c0:	00 1c       	adc	r0, r0
    11c2:	ca f7       	brpl	.-14     	; 0x11b6 <__divsf3_pse+0x2c>
    11c4:	2b d0       	rcall	.+86     	; 0x121c <__divsf3_pse+0x92>
    11c6:	fe 2f       	mov	r31, r30
    11c8:	29 d0       	rcall	.+82     	; 0x121c <__divsf3_pse+0x92>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	88 1f       	adc	r24, r24
    11d0:	bb 1f       	adc	r27, r27
    11d2:	26 17       	cp	r18, r22
    11d4:	37 07       	cpc	r19, r23
    11d6:	48 07       	cpc	r20, r24
    11d8:	ab 07       	cpc	r26, r27
    11da:	b0 e8       	ldi	r27, 0x80	; 128
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <__divsf3_pse+0x56>
    11de:	bb 0b       	sbc	r27, r27
    11e0:	80 2d       	mov	r24, r0
    11e2:	bf 01       	movw	r22, r30
    11e4:	ff 27       	eor	r31, r31
    11e6:	93 58       	subi	r25, 0x83	; 131
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	3a f0       	brmi	.+14     	; 0x11fa <__divsf3_pse+0x70>
    11ec:	9e 3f       	cpi	r25, 0xFE	; 254
    11ee:	51 05       	cpc	r21, r1
    11f0:	78 f0       	brcs	.+30     	; 0x1210 <__divsf3_pse+0x86>
    11f2:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_inf>
    11f6:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_szero>
    11fa:	5f 3f       	cpi	r21, 0xFF	; 255
    11fc:	e4 f3       	brlt	.-8      	; 0x11f6 <__divsf3_pse+0x6c>
    11fe:	98 3e       	cpi	r25, 0xE8	; 232
    1200:	d4 f3       	brlt	.-12     	; 0x11f6 <__divsf3_pse+0x6c>
    1202:	86 95       	lsr	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	f7 95       	ror	r31
    120c:	9f 5f       	subi	r25, 0xFF	; 255
    120e:	c9 f7       	brne	.-14     	; 0x1202 <__divsf3_pse+0x78>
    1210:	88 0f       	add	r24, r24
    1212:	91 1d       	adc	r25, r1
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	97 f9       	bld	r25, 7
    121a:	08 95       	ret
    121c:	e1 e0       	ldi	r30, 0x01	; 1
    121e:	66 0f       	add	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	bb 1f       	adc	r27, r27
    1226:	62 17       	cp	r22, r18
    1228:	73 07       	cpc	r23, r19
    122a:	84 07       	cpc	r24, r20
    122c:	ba 07       	cpc	r27, r26
    122e:	20 f0       	brcs	.+8      	; 0x1238 <__divsf3_pse+0xae>
    1230:	62 1b       	sub	r22, r18
    1232:	73 0b       	sbc	r23, r19
    1234:	84 0b       	sbc	r24, r20
    1236:	ba 0b       	sbc	r27, r26
    1238:	ee 1f       	adc	r30, r30
    123a:	88 f7       	brcc	.-30     	; 0x121e <__divsf3_pse+0x94>
    123c:	e0 95       	com	r30
    123e:	08 95       	ret

00001240 <__fixsfsi>:
    1240:	0e 94 27 09 	call	0x124e	; 0x124e <__fixunssfsi>
    1244:	68 94       	set
    1246:	b1 11       	cpse	r27, r1
    1248:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_szero>
    124c:	08 95       	ret

0000124e <__fixunssfsi>:
    124e:	0e 94 c3 09 	call	0x1386	; 0x1386 <__fp_splitA>
    1252:	88 f0       	brcs	.+34     	; 0x1276 <__fixunssfsi+0x28>
    1254:	9f 57       	subi	r25, 0x7F	; 127
    1256:	98 f0       	brcs	.+38     	; 0x127e <__fixunssfsi+0x30>
    1258:	b9 2f       	mov	r27, r25
    125a:	99 27       	eor	r25, r25
    125c:	b7 51       	subi	r27, 0x17	; 23
    125e:	b0 f0       	brcs	.+44     	; 0x128c <__fixunssfsi+0x3e>
    1260:	e1 f0       	breq	.+56     	; 0x129a <__fixunssfsi+0x4c>
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	1a f0       	brmi	.+6      	; 0x1272 <__fixunssfsi+0x24>
    126c:	ba 95       	dec	r27
    126e:	c9 f7       	brne	.-14     	; 0x1262 <__fixunssfsi+0x14>
    1270:	14 c0       	rjmp	.+40     	; 0x129a <__fixunssfsi+0x4c>
    1272:	b1 30       	cpi	r27, 0x01	; 1
    1274:	91 f0       	breq	.+36     	; 0x129a <__fixunssfsi+0x4c>
    1276:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fp_zero>
    127a:	b1 e0       	ldi	r27, 0x01	; 1
    127c:	08 95       	ret
    127e:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_zero>
    1282:	67 2f       	mov	r22, r23
    1284:	78 2f       	mov	r23, r24
    1286:	88 27       	eor	r24, r24
    1288:	b8 5f       	subi	r27, 0xF8	; 248
    128a:	39 f0       	breq	.+14     	; 0x129a <__fixunssfsi+0x4c>
    128c:	b9 3f       	cpi	r27, 0xF9	; 249
    128e:	cc f3       	brlt	.-14     	; 0x1282 <__fixunssfsi+0x34>
    1290:	86 95       	lsr	r24
    1292:	77 95       	ror	r23
    1294:	67 95       	ror	r22
    1296:	b3 95       	inc	r27
    1298:	d9 f7       	brne	.-10     	; 0x1290 <__fixunssfsi+0x42>
    129a:	3e f4       	brtc	.+14     	; 0x12aa <__fixunssfsi+0x5c>
    129c:	90 95       	com	r25
    129e:	80 95       	com	r24
    12a0:	70 95       	com	r23
    12a2:	61 95       	neg	r22
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__floatunsisf>:
    12ac:	e8 94       	clt
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <__floatsisf+0x12>

000012b0 <__floatsisf>:
    12b0:	97 fb       	bst	r25, 7
    12b2:	3e f4       	brtc	.+14     	; 0x12c2 <__floatsisf+0x12>
    12b4:	90 95       	com	r25
    12b6:	80 95       	com	r24
    12b8:	70 95       	com	r23
    12ba:	61 95       	neg	r22
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	8f 4f       	sbci	r24, 0xFF	; 255
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	99 23       	and	r25, r25
    12c4:	a9 f0       	breq	.+42     	; 0x12f0 <__floatsisf+0x40>
    12c6:	f9 2f       	mov	r31, r25
    12c8:	96 e9       	ldi	r25, 0x96	; 150
    12ca:	bb 27       	eor	r27, r27
    12cc:	93 95       	inc	r25
    12ce:	f6 95       	lsr	r31
    12d0:	87 95       	ror	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	f1 11       	cpse	r31, r1
    12da:	f8 cf       	rjmp	.-16     	; 0x12cc <__floatsisf+0x1c>
    12dc:	fa f4       	brpl	.+62     	; 0x131c <__floatsisf+0x6c>
    12de:	bb 0f       	add	r27, r27
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <__floatsisf+0x36>
    12e2:	60 ff       	sbrs	r22, 0
    12e4:	1b c0       	rjmp	.+54     	; 0x131c <__floatsisf+0x6c>
    12e6:	6f 5f       	subi	r22, 0xFF	; 255
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <__floatsisf+0x6c>
    12f0:	88 23       	and	r24, r24
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <__floatsisf+0x48>
    12f4:	96 e9       	ldi	r25, 0x96	; 150
    12f6:	11 c0       	rjmp	.+34     	; 0x131a <__floatsisf+0x6a>
    12f8:	77 23       	and	r23, r23
    12fa:	21 f0       	breq	.+8      	; 0x1304 <__floatsisf+0x54>
    12fc:	9e e8       	ldi	r25, 0x8E	; 142
    12fe:	87 2f       	mov	r24, r23
    1300:	76 2f       	mov	r23, r22
    1302:	05 c0       	rjmp	.+10     	; 0x130e <__floatsisf+0x5e>
    1304:	66 23       	and	r22, r22
    1306:	71 f0       	breq	.+28     	; 0x1324 <__floatsisf+0x74>
    1308:	96 e8       	ldi	r25, 0x86	; 134
    130a:	86 2f       	mov	r24, r22
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	2a f0       	brmi	.+10     	; 0x131c <__floatsisf+0x6c>
    1312:	9a 95       	dec	r25
    1314:	66 0f       	add	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	da f7       	brpl	.-10     	; 0x1312 <__floatsisf+0x62>
    131c:	88 0f       	add	r24, r24
    131e:	96 95       	lsr	r25
    1320:	87 95       	ror	r24
    1322:	97 f9       	bld	r25, 7
    1324:	08 95       	ret

00001326 <__fp_inf>:
    1326:	97 f9       	bld	r25, 7
    1328:	9f 67       	ori	r25, 0x7F	; 127
    132a:	80 e8       	ldi	r24, 0x80	; 128
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	08 95       	ret

00001332 <__fp_nan>:
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	80 ec       	ldi	r24, 0xC0	; 192
    1336:	08 95       	ret

00001338 <__fp_pscA>:
    1338:	00 24       	eor	r0, r0
    133a:	0a 94       	dec	r0
    133c:	16 16       	cp	r1, r22
    133e:	17 06       	cpc	r1, r23
    1340:	18 06       	cpc	r1, r24
    1342:	09 06       	cpc	r0, r25
    1344:	08 95       	ret

00001346 <__fp_pscB>:
    1346:	00 24       	eor	r0, r0
    1348:	0a 94       	dec	r0
    134a:	12 16       	cp	r1, r18
    134c:	13 06       	cpc	r1, r19
    134e:	14 06       	cpc	r1, r20
    1350:	05 06       	cpc	r0, r21
    1352:	08 95       	ret

00001354 <__fp_round>:
    1354:	09 2e       	mov	r0, r25
    1356:	03 94       	inc	r0
    1358:	00 0c       	add	r0, r0
    135a:	11 f4       	brne	.+4      	; 0x1360 <__fp_round+0xc>
    135c:	88 23       	and	r24, r24
    135e:	52 f0       	brmi	.+20     	; 0x1374 <__fp_round+0x20>
    1360:	bb 0f       	add	r27, r27
    1362:	40 f4       	brcc	.+16     	; 0x1374 <__fp_round+0x20>
    1364:	bf 2b       	or	r27, r31
    1366:	11 f4       	brne	.+4      	; 0x136c <__fp_round+0x18>
    1368:	60 ff       	sbrs	r22, 0
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <__fp_round+0x20>
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	08 95       	ret

00001376 <__fp_split3>:
    1376:	57 fd       	sbrc	r21, 7
    1378:	90 58       	subi	r25, 0x80	; 128
    137a:	44 0f       	add	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	59 f0       	breq	.+22     	; 0x1396 <__fp_splitA+0x10>
    1380:	5f 3f       	cpi	r21, 0xFF	; 255
    1382:	71 f0       	breq	.+28     	; 0x13a0 <__fp_splitA+0x1a>
    1384:	47 95       	ror	r20

00001386 <__fp_splitA>:
    1386:	88 0f       	add	r24, r24
    1388:	97 fb       	bst	r25, 7
    138a:	99 1f       	adc	r25, r25
    138c:	61 f0       	breq	.+24     	; 0x13a6 <__fp_splitA+0x20>
    138e:	9f 3f       	cpi	r25, 0xFF	; 255
    1390:	79 f0       	breq	.+30     	; 0x13b0 <__fp_splitA+0x2a>
    1392:	87 95       	ror	r24
    1394:	08 95       	ret
    1396:	12 16       	cp	r1, r18
    1398:	13 06       	cpc	r1, r19
    139a:	14 06       	cpc	r1, r20
    139c:	55 1f       	adc	r21, r21
    139e:	f2 cf       	rjmp	.-28     	; 0x1384 <__fp_split3+0xe>
    13a0:	46 95       	lsr	r20
    13a2:	f1 df       	rcall	.-30     	; 0x1386 <__fp_splitA>
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <__fp_splitA+0x30>
    13a6:	16 16       	cp	r1, r22
    13a8:	17 06       	cpc	r1, r23
    13aa:	18 06       	cpc	r1, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	f1 cf       	rjmp	.-30     	; 0x1392 <__fp_splitA+0xc>
    13b0:	86 95       	lsr	r24
    13b2:	71 05       	cpc	r23, r1
    13b4:	61 05       	cpc	r22, r1
    13b6:	08 94       	sec
    13b8:	08 95       	ret

000013ba <__fp_zero>:
    13ba:	e8 94       	clt

000013bc <__fp_szero>:
    13bc:	bb 27       	eor	r27, r27
    13be:	66 27       	eor	r22, r22
    13c0:	77 27       	eor	r23, r23
    13c2:	cb 01       	movw	r24, r22
    13c4:	97 f9       	bld	r25, 7
    13c6:	08 95       	ret

000013c8 <__mulsf3>:
    13c8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__mulsf3x>
    13cc:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__fp_round>
    13d0:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_pscA>
    13d4:	38 f0       	brcs	.+14     	; 0x13e4 <__mulsf3+0x1c>
    13d6:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_pscB>
    13da:	20 f0       	brcs	.+8      	; 0x13e4 <__mulsf3+0x1c>
    13dc:	95 23       	and	r25, r21
    13de:	11 f0       	breq	.+4      	; 0x13e4 <__mulsf3+0x1c>
    13e0:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_inf>
    13e4:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__fp_nan>
    13e8:	11 24       	eor	r1, r1
    13ea:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_szero>

000013ee <__mulsf3x>:
    13ee:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_split3>
    13f2:	70 f3       	brcs	.-36     	; 0x13d0 <__mulsf3+0x8>

000013f4 <__mulsf3_pse>:
    13f4:	95 9f       	mul	r25, r21
    13f6:	c1 f3       	breq	.-16     	; 0x13e8 <__mulsf3+0x20>
    13f8:	95 0f       	add	r25, r21
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	55 1f       	adc	r21, r21
    13fe:	62 9f       	mul	r22, r18
    1400:	f0 01       	movw	r30, r0
    1402:	72 9f       	mul	r23, r18
    1404:	bb 27       	eor	r27, r27
    1406:	f0 0d       	add	r31, r0
    1408:	b1 1d       	adc	r27, r1
    140a:	63 9f       	mul	r22, r19
    140c:	aa 27       	eor	r26, r26
    140e:	f0 0d       	add	r31, r0
    1410:	b1 1d       	adc	r27, r1
    1412:	aa 1f       	adc	r26, r26
    1414:	64 9f       	mul	r22, r20
    1416:	66 27       	eor	r22, r22
    1418:	b0 0d       	add	r27, r0
    141a:	a1 1d       	adc	r26, r1
    141c:	66 1f       	adc	r22, r22
    141e:	82 9f       	mul	r24, r18
    1420:	22 27       	eor	r18, r18
    1422:	b0 0d       	add	r27, r0
    1424:	a1 1d       	adc	r26, r1
    1426:	62 1f       	adc	r22, r18
    1428:	73 9f       	mul	r23, r19
    142a:	b0 0d       	add	r27, r0
    142c:	a1 1d       	adc	r26, r1
    142e:	62 1f       	adc	r22, r18
    1430:	83 9f       	mul	r24, r19
    1432:	a0 0d       	add	r26, r0
    1434:	61 1d       	adc	r22, r1
    1436:	22 1f       	adc	r18, r18
    1438:	74 9f       	mul	r23, r20
    143a:	33 27       	eor	r19, r19
    143c:	a0 0d       	add	r26, r0
    143e:	61 1d       	adc	r22, r1
    1440:	23 1f       	adc	r18, r19
    1442:	84 9f       	mul	r24, r20
    1444:	60 0d       	add	r22, r0
    1446:	21 1d       	adc	r18, r1
    1448:	82 2f       	mov	r24, r18
    144a:	76 2f       	mov	r23, r22
    144c:	6a 2f       	mov	r22, r26
    144e:	11 24       	eor	r1, r1
    1450:	9f 57       	subi	r25, 0x7F	; 127
    1452:	50 40       	sbci	r21, 0x00	; 0
    1454:	9a f0       	brmi	.+38     	; 0x147c <__mulsf3_pse+0x88>
    1456:	f1 f0       	breq	.+60     	; 0x1494 <__mulsf3_pse+0xa0>
    1458:	88 23       	and	r24, r24
    145a:	4a f0       	brmi	.+18     	; 0x146e <__mulsf3_pse+0x7a>
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	bb 1f       	adc	r27, r27
    1462:	66 1f       	adc	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	88 1f       	adc	r24, r24
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	50 40       	sbci	r21, 0x00	; 0
    146c:	a9 f7       	brne	.-22     	; 0x1458 <__mulsf3_pse+0x64>
    146e:	9e 3f       	cpi	r25, 0xFE	; 254
    1470:	51 05       	cpc	r21, r1
    1472:	80 f0       	brcs	.+32     	; 0x1494 <__mulsf3_pse+0xa0>
    1474:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_inf>
    1478:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_szero>
    147c:	5f 3f       	cpi	r21, 0xFF	; 255
    147e:	e4 f3       	brlt	.-8      	; 0x1478 <__mulsf3_pse+0x84>
    1480:	98 3e       	cpi	r25, 0xE8	; 232
    1482:	d4 f3       	brlt	.-12     	; 0x1478 <__mulsf3_pse+0x84>
    1484:	86 95       	lsr	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f7 95       	ror	r31
    148e:	e7 95       	ror	r30
    1490:	9f 5f       	subi	r25, 0xFF	; 255
    1492:	c1 f7       	brne	.-16     	; 0x1484 <__mulsf3_pse+0x90>
    1494:	fe 2b       	or	r31, r30
    1496:	88 0f       	add	r24, r24
    1498:	91 1d       	adc	r25, r1
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	97 f9       	bld	r25, 7
    14a0:	08 95       	ret

000014a2 <__udivmodsi4>:
    14a2:	a1 e2       	ldi	r26, 0x21	; 33
    14a4:	1a 2e       	mov	r1, r26
    14a6:	aa 1b       	sub	r26, r26
    14a8:	bb 1b       	sub	r27, r27
    14aa:	fd 01       	movw	r30, r26
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <__udivmodsi4_ep>

000014ae <__udivmodsi4_loop>:
    14ae:	aa 1f       	adc	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	ee 1f       	adc	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	a2 17       	cp	r26, r18
    14b8:	b3 07       	cpc	r27, r19
    14ba:	e4 07       	cpc	r30, r20
    14bc:	f5 07       	cpc	r31, r21
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__udivmodsi4_ep>
    14c0:	a2 1b       	sub	r26, r18
    14c2:	b3 0b       	sbc	r27, r19
    14c4:	e4 0b       	sbc	r30, r20
    14c6:	f5 0b       	sbc	r31, r21

000014c8 <__udivmodsi4_ep>:
    14c8:	66 1f       	adc	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	1a 94       	dec	r1
    14d2:	69 f7       	brne	.-38     	; 0x14ae <__udivmodsi4_loop>
    14d4:	60 95       	com	r22
    14d6:	70 95       	com	r23
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	cf 01       	movw	r24, r30
    14e4:	08 95       	ret

000014e6 <__divmodsi4>:
    14e6:	05 2e       	mov	r0, r21
    14e8:	97 fb       	bst	r25, 7
    14ea:	1e f4       	brtc	.+6      	; 0x14f2 <__divmodsi4+0xc>
    14ec:	00 94       	com	r0
    14ee:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__negsi2>
    14f2:	57 fd       	sbrc	r21, 7
    14f4:	07 d0       	rcall	.+14     	; 0x1504 <__divmodsi4_neg2>
    14f6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
    14fa:	07 fc       	sbrc	r0, 7
    14fc:	03 d0       	rcall	.+6      	; 0x1504 <__divmodsi4_neg2>
    14fe:	4e f4       	brtc	.+18     	; 0x1512 <__divmodsi4_exit>
    1500:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__negsi2>

00001504 <__divmodsi4_neg2>:
    1504:	50 95       	com	r21
    1506:	40 95       	com	r20
    1508:	30 95       	com	r19
    150a:	21 95       	neg	r18
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	4f 4f       	sbci	r20, 0xFF	; 255
    1510:	5f 4f       	sbci	r21, 0xFF	; 255

00001512 <__divmodsi4_exit>:
    1512:	08 95       	ret

00001514 <__negsi2>:
    1514:	90 95       	com	r25
    1516:	80 95       	com	r24
    1518:	70 95       	com	r23
    151a:	61 95       	neg	r22
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	8f 4f       	sbci	r24, 0xFF	; 255
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	08 95       	ret

00001524 <__muluhisi3>:
    1524:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
    1528:	a5 9f       	mul	r26, r21
    152a:	90 0d       	add	r25, r0
    152c:	b4 9f       	mul	r27, r20
    152e:	90 0d       	add	r25, r0
    1530:	a4 9f       	mul	r26, r20
    1532:	80 0d       	add	r24, r0
    1534:	91 1d       	adc	r25, r1
    1536:	11 24       	eor	r1, r1
    1538:	08 95       	ret

0000153a <__umulhisi3>:
    153a:	a2 9f       	mul	r26, r18
    153c:	b0 01       	movw	r22, r0
    153e:	b3 9f       	mul	r27, r19
    1540:	c0 01       	movw	r24, r0
    1542:	a3 9f       	mul	r26, r19
    1544:	70 0d       	add	r23, r0
    1546:	81 1d       	adc	r24, r1
    1548:	11 24       	eor	r1, r1
    154a:	91 1d       	adc	r25, r1
    154c:	b2 9f       	mul	r27, r18
    154e:	70 0d       	add	r23, r0
    1550:	81 1d       	adc	r24, r1
    1552:	11 24       	eor	r1, r1
    1554:	91 1d       	adc	r25, r1
    1556:	08 95       	ret

00001558 <_exit>:
    1558:	f8 94       	cli

0000155a <__stop_program>:
    155a:	ff cf       	rjmp	.-2      	; 0x155a <__stop_program>
